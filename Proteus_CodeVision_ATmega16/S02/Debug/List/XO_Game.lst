
AVRASM ver. 2.1.30  C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm Thu Jun 08 20:51:11 2023

C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Proteus_CodeVision_ATmega16\S02\Debug\List\XO_Game.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _player=R4
                 	.DEF _player_msb=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF _state=R8
                 	.DEF _state_msb=R9
                 	.DEF _r=R10
                 	.DEF _r_msb=R11
                 	.DEF _c=R12
                 	.DEF _c_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0070 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 fdfe
000034 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
000035 5b06      	.DB  0x6,0x5B
                 _0x0:
000036 5000
000037 6572
000038 7373
000039 4f20      	.DB  0x0,0x50,0x72,0x65,0x73,0x73,0x20,0x4F
00003a 204e
00003b 6f74
00003c 5320
00003d 6174      	.DB  0x4E,0x20,0x74,0x6F,0x20,0x53,0x74,0x61
00003e 7472
00003f 2e2e
000040 002e
000041 6425      	.DB  0x72,0x74,0x2E,0x2E,0x2E,0x0,0x25,0x64
000042 7000
000043 616c
000044 6579
000045 2072      	.DB  0x0,0x70,0x6C,0x61,0x79,0x65,0x72,0x20
000046 2058
000047 6977
000048 736e
000049 2120      	.DB  0x58,0x20,0x77,0x69,0x6E,0x73,0x20,0x21
00004a 0021
00004b 6c70
00004c 7961
00004d 7265      	.DB  0x21,0x0,0x70,0x6C,0x61,0x79,0x65,0x72
00004e 4f20
00004f 7720
000050 6e69
000051 2073      	.DB  0x20,0x4F,0x20,0x77,0x69,0x6E,0x73,0x20
000052 2121
000053 4400
000054 6172
000055 0077      	.DB  0x21,0x21,0x0,0x44,0x72,0x61,0x77,0x0
                 _0x2000003:
000056 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000057 0004      	.DW  0x04
000058 01c1      	.DW  _row
000059 0066      	.DW  _0x3*2
                 
00005a 0002      	.DW  0x02
00005b 01c7      	.DW  _num
00005c 006a      	.DW  _0x4*2
                 
00005d 0001      	.DW  0x01
00005e 0160      	.DW  _0x1C
00005f 006c      	.DW  _0x0*2
                 
000060 0015      	.DW  0x15
000061 0161      	.DW  _0x1C+1
000062 006d      	.DW  _0x0*2+1
                 
000063 0011      	.DW  0x11
000064 0176      	.DW  _0x55
000065 0085      	.DW  _0x0*2+25
                 
000066 0011      	.DW  0x11
000067 0187      	.DW  _0x55+17
000068 0096      	.DW  _0x0*2+42
                 
000069 0005      	.DW  0x05
00006a 0198      	.DW  _0x55+34
00006b 00a7      	.DW  _0x0*2+59
                 
00006c 0002      	.DW  0x02
00006d 01c9      	.DW  __base_y_G100
00006e 00ac      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00006f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000070 94f8      	CLI
000071 27ee      	CLR  R30
000072 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000073 e0f1      	LDI  R31,1
000074 bffb      	OUT  GICR,R31
000075 bfeb      	OUT  GICR,R30
000076 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000077 e08d      	LDI  R24,(14-2)+1
000078 e0a2      	LDI  R26,2
000079 27bb      	CLR  R27
                 __CLEAR_REG:
00007a 93ed      	ST   X+,R30
00007b 958a      	DEC  R24
00007c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000080 93ed      	ST   X+,R30
000081 9701      	SBIW R24,1
000082 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000083 eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000084 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000085 9185      	LPM  R24,Z+
000086 9195      	LPM  R25,Z+
000087 9700      	SBIW R24,0
000088 f061      	BREQ __GLOBAL_INI_END
000089 91a5      	LPM  R26,Z+
00008a 91b5      	LPM  R27,Z+
00008b 9005      	LPM  R0,Z+
00008c 9015      	LPM  R1,Z+
00008d 01bf      	MOVW R22,R30
00008e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008f 9005      	LPM  R0,Z+
000090 920d      	ST   X+,R0
000091 9701      	SBIW R24,1
000092 f7e1      	BRNE __GLOBAL_INI_LOOP
000093 01fb      	MOVW R30,R22
000094 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000095 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000096 bfed      	OUT  SPL,R30
000097 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000098 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000099 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009b 940c 01dc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <lcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;#asm
                 .equ __lcd_port = 0x12
                 ; 0000 0009 #endasm
                 ;
                 ;    // global variable
                 ;    int game[3][3];
                 ;int win[8];
                 ;int player, count, state, r, c, k;
                 ;unsigned char row[4] = {0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char txt[2];
                 ;unsigned char num[2] = {0x06, 0x5B};
                 ;
                 ;void keypad()
                 ; 0000 0014 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0015     while (1)
                 _0x5:
                 ; 0000 0016     {
                 ; 0000 0017         for (r = 0; r < 4; r++)
00009d 24aa      	CLR  R10
00009e 24bb      	CLR  R11
                 _0x9:
00009f e0e4      	LDI  R30,LOW(4)
0000a0 e0f0      	LDI  R31,HIGH(4)
0000a1 16ae      	CP   R10,R30
0000a2 06bf      	CPC  R11,R31
0000a3 f594      	BRGE _0xA
                 ; 0000 0018         {
                 ; 0000 0019             c = 4;
0000a4 016f      	MOVW R12,R30
                 ; 0000 001A             PORTC = row[r];
0000a5 eca1      	LDI  R26,LOW(_row)
0000a6 e0b1      	LDI  R27,HIGH(_row)
0000a7 0daa      	ADD  R26,R10
0000a8 1dbb      	ADC  R27,R11
0000a9 91ec      	LD   R30,X
0000aa bbe5      	OUT  0x15,R30
                 ; 0000 001B             DDRC = 0x0F;
0000ab e0ef      	LDI  R30,LOW(15)
0000ac bbe4      	OUT  0x14,R30
                 ; 0000 001C             if (PINC .4 == 0)
0000ad 999c      	SBIC 0x13,4
0000ae c002      	RJMP _0xB
                 ; 0000 001D                 c = 0;
0000af 24cc      	CLR  R12
0000b0 24dd      	CLR  R13
                 ; 0000 001E             if (PINC .5 == 0)
                 _0xB:
0000b1 999d      	SBIC 0x13,5
0000b2 c003      	RJMP _0xC
                 ; 0000 001F                 c = 1;
0000b3 e0e1      	LDI  R30,LOW(1)
0000b4 e0f0      	LDI  R31,HIGH(1)
0000b5 016f      	MOVW R12,R30
                 ; 0000 0020             if (PINC .6 == 0)
                 _0xC:
0000b6 999e      	SBIC 0x13,6
0000b7 c003      	RJMP _0xD
                 ; 0000 0021                 c = 2;
0000b8 e0e2      	LDI  R30,LOW(2)
0000b9 e0f0      	LDI  R31,HIGH(2)
0000ba 016f      	MOVW R12,R30
                 ; 0000 0022             if (PINC .7 == 0)
                 _0xD:
0000bb 999f      	SBIC 0x13,7
0000bc c003      	RJMP _0xE
                 ; 0000 0023                 c = 3;
0000bd e0e3      	LDI  R30,LOW(3)
0000be e0f0      	LDI  R31,HIGH(3)
0000bf 016f      	MOVW R12,R30
                 ; 0000 0024             if (!(c == 4))
                 _0xE:
0000c0 e0e4      	LDI  R30,LOW(4)
0000c1 e0f0      	LDI  R31,HIGH(4)
0000c2 15ec      	CP   R30,R12
0000c3 05fd      	CPC  R31,R13
0000c4 f049      	BREQ _0xF
                 ; 0000 0025             {
                 ; 0000 0026                 while (PINC .4 == 0)
                 _0x10:
0000c5 9b9c      	SBIS 0x13,4
                 ; 0000 0027                     ;
0000c6 cffe      	RJMP _0x10
                 ; 0000 0028                 while (PINC .5 == 0)
                 _0x13:
0000c7 9b9d      	SBIS 0x13,5
                 ; 0000 0029                     ;
0000c8 cffe      	RJMP _0x13
                 ; 0000 002A                 while (PINC .6 == 0)
                 _0x16:
0000c9 9b9e      	SBIS 0x13,6
                 ; 0000 002B                     ;
0000ca cffe      	RJMP _0x16
                 ; 0000 002C                 while (PINC .7 == 0)
                 _0x19:
0000cb 9b9f      	SBIS 0x13,7
                 ; 0000 002D                     ;
0000cc cffe      	RJMP _0x19
                 ; 0000 002E                 return;
0000cd 9508      	RET
                 ; 0000 002F             }
                 ; 0000 0030             delay_ms(5);
                 _0xF:
0000ce e0a5      	LDI  R26,LOW(5)
0000cf e0b0      	LDI  R27,0
0000d0 940e 05b9 	CALL _delay_ms
                 ; 0000 0031         }
0000d2 01f5      	MOVW R30,R10
0000d3 9631      	ADIW R30,1
0000d4 015f      	MOVW R10,R30
0000d5 cfc9      	RJMP _0x9
                 _0xA:
                 ; 0000 0032     }
0000d6 cfc6      	RJMP _0x5
                 ; 0000 0033 }
                 ; .FEND
                 ;
                 ;void init()
                 ; 0000 0036 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0037     player = 0;
0000d7 2444      	CLR  R4
0000d8 2455      	CLR  R5
                 ; 0000 0038     count = 0;
0000d9 2466      	CLR  R6
0000da 2477      	CLR  R7
                 ; 0000 0039     state = 0;
0000db 2488      	CLR  R8
0000dc 2499      	CLR  R9
                 ; 0000 003A     strcpy(txt, "");
0000dd ece5      	LDI  R30,LOW(_txt)
0000de e0f1      	LDI  R31,HIGH(_txt)
0000df 93fa      	ST   -Y,R31
0000e0 93ea      	ST   -Y,R30
                +
0000e1 e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
0000e2 e0b1     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
0000e3 940e 050e 	CALL _strcpy
                 ; 0000 003B     for (r = 0; r < 3; r++)
0000e5 24aa      	CLR  R10
0000e6 24bb      	CLR  R11
                 _0x1E:
0000e7 940e 0534 	CALL SUBOPT_0x0
0000e9 f48c      	BRGE _0x1F
                 ; 0000 003C         for (c = 0; c < 3; c++)
0000ea 24cc      	CLR  R12
0000eb 24dd      	CLR  R13
                 _0x21:
0000ec 940e 0539 	CALL SUBOPT_0x1
0000ee f444      	BRGE _0x22
                 ; 0000 003D             game[r][c] = 0; // initialing game array
0000ef 940e 053e 	CALL SUBOPT_0x2
0000f1 940e 054c 	CALL SUBOPT_0x3
0000f3 01f6      	MOVW R30,R12
0000f4 9631      	ADIW R30,1
0000f5 016f      	MOVW R12,R30
0000f6 cff5      	RJMP _0x21
                 _0x22:
                 ; 0000 003E for (r = 0; r < 8; r++)
0000f7 01f5      	MOVW R30,R10
0000f8 9631      	ADIW R30,1
0000f9 015f      	MOVW R10,R30
0000fa cfec      	RJMP _0x1E
                 _0x1F:
0000fb 24aa      	CLR  R10
0000fc 24bb      	CLR  R11
                 _0x24:
0000fd 940e 0551 	CALL SUBOPT_0x4
0000ff f434      	BRGE _0x25
                 ; 0000 003F         win[r] = 0; // initialing win array
000100 940e 0556 	CALL SUBOPT_0x5
000102 01f5      	MOVW R30,R10
000103 9631      	ADIW R30,1
000104 015f      	MOVW R10,R30
000105 cff7      	RJMP _0x24
                 _0x25:
                 ; 0000 0040 r = 0;
000106 24aa      	CLR  R10
000107 24bb      	CLR  R11
                 ; 0000 0041     c = 0;
000108 24cc      	CLR  R12
000109 24dd      	CLR  R13
                 ; 0000 0042     lcd_clear();
00010a 940e 02d6 	CALL _lcd_clear
                 ; 0000 0043     lcd_puts("Press ON to Start...");
                +
00010c e6a1     +LDI R26 , LOW ( _0x1C + ( 1 ) )
00010d e0b1     +LDI R27 , HIGH ( _0x1C + ( 1 ) )
                 	__POINTW2MN _0x1C,1
00010e 940e 0312 	CALL _lcd_puts
                 ; 0000 0044     do
                 _0x27:
                 ; 0000 0045     {
                 ; 0000 0046         keypad();
000110 940e 055e 	CALL SUBOPT_0x6
                 ; 0000 0047         k = r * 4 + c;
                 ; 0000 0048     } while (k != 12);
000112 940e 056a 	CALL SUBOPT_0x7
000114 971c      	SBIW R26,12
000115 f7d1      	BRNE _0x27
                 ; 0000 0049     lcd_clear();
000116 940e 02d6 	CALL _lcd_clear
                 ; 0000 004A     for (r = 3; r > 0; r--)
000118 e0e3      	LDI  R30,LOW(3)
000119 e0f0      	LDI  R31,HIGH(3)
00011a 015f      	MOVW R10,R30
                 _0x2A:
00011b 2400      	CLR  R0
00011c 140a      	CP   R0,R10
00011d 040b      	CPC  R0,R11
00011e f4fc      	BRGE _0x2B
                 ; 0000 004B     {
                 ; 0000 004C         sprintf(txt, "%d", r);
00011f ece5      	LDI  R30,LOW(_txt)
000120 e0f1      	LDI  R31,HIGH(_txt)
000121 93fa      	ST   -Y,R31
000122 93ea      	ST   -Y,R30
                +
000123 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000124 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
000125 93fa      	ST   -Y,R31
000126 93ea      	ST   -Y,R30
000127 01f5      	MOVW R30,R10
000128 940e 05d0 	CALL __CWD1
00012a 940e 05ea 	CALL __PUTPARD1
00012c e084      	LDI  R24,4
00012d 940e 04da 	CALL _sprintf
00012f 9628      	ADIW R28,8
                 ; 0000 004D         lcd_puts(txt);
000130 eca5      	LDI  R26,LOW(_txt)
000131 e0b1      	LDI  R27,HIGH(_txt)
000132 940e 0312 	CALL _lcd_puts
                 ; 0000 004E         delay_ms(100);
000134 e6a4      	LDI  R26,LOW(100)
000135 e0b0      	LDI  R27,0
000136 940e 05b9 	CALL _delay_ms
                 ; 0000 004F         lcd_clear();
000138 940e 02d6 	CALL _lcd_clear
                 ; 0000 0050     }
00013a 01f5      	MOVW R30,R10
00013b 9731      	SBIW R30,1
00013c 015f      	MOVW R10,R30
00013d cfdd      	RJMP _0x2A
                 _0x2B:
                 ; 0000 0051     PORTA = num[player];
00013e 940e 056f 	CALL SUBOPT_0x8
                 ; 0000 0052 }
000140 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000160           	.BYTE 0x16
                 ;
                 ;void showBoard()
                 ; 0000 0055 {
                 
                 	.CSEG
                 _showBoard:
                 ; .FSTART _showBoard
                 ; 0000 0056     lcd_clear();
000141 940e 02d6 	CALL _lcd_clear
                 ; 0000 0057     for (r = 0; r < 3; r++)
000143 24aa      	CLR  R10
000144 24bb      	CLR  R11
                 _0x2D:
000145 940e 0534 	CALL SUBOPT_0x0
000147 f544      	BRGE _0x2E
                 ; 0000 0058         for (c = 0; c < 3; c++)
000148 24cc      	CLR  R12
000149 24dd      	CLR  R13
                 _0x30:
00014a 940e 0539 	CALL SUBOPT_0x1
00014c f4fc      	BRGE _0x31
                 ; 0000 0059         {
                 ; 0000 005A             lcd_gotoxy(c, r);
00014d 92ca      	ST   -Y,R12
00014e 2daa      	MOV  R26,R10
00014f 940e 02c2 	CALL _lcd_gotoxy
                 ; 0000 005B             if (game[r][c] == 1)
000151 940e 053e 	CALL SUBOPT_0x2
000153 940e 05e2 	CALL __GETW1P
000155 30e1      	CPI  R30,LOW(0x1)
000156 e0a0      	LDI  R26,HIGH(0x1)
000157 07fa      	CPC  R31,R26
000158 f411      	BRNE _0x32
                 ; 0000 005C                 lcd_putchar('X');
000159 e5a8      	LDI  R26,LOW(88)
00015a c00b      	RJMP _0x5F
                 ; 0000 005D             else if (game[r][c] == -1)
                 _0x32:
00015b 940e 053e 	CALL SUBOPT_0x2
00015d 940e 05e2 	CALL __GETW1P
00015f 3fef      	CPI  R30,LOW(0xFFFF)
000160 efaf      	LDI  R26,HIGH(0xFFFF)
000161 07fa      	CPC  R31,R26
000162 f411      	BRNE _0x34
                 ; 0000 005E                 lcd_putchar('O');
000163 e4af      	LDI  R26,LOW(79)
000164 c001      	RJMP _0x5F
                 ; 0000 005F             else
                 _0x34:
                 ; 0000 0060                 lcd_putchar('-');
000165 e2ad      	LDI  R26,LOW(45)
                 _0x5F:
000166 940e 02eb 	CALL _lcd_putchar
                 ; 0000 0061         }
000168 01f6      	MOVW R30,R12
000169 9631      	ADIW R30,1
00016a 016f      	MOVW R12,R30
00016b cfde      	RJMP _0x30
                 _0x31:
00016c 01f5      	MOVW R30,R10
00016d 9631      	ADIW R30,1
00016e 015f      	MOVW R10,R30
00016f cfd5      	RJMP _0x2D
                 _0x2E:
                 ; 0000 0062 }
000170 9508      	RET
                 ; .FEND
                 ;
                 ;void winnerCheck()
                 ; 0000 0065 {
                 _winnerCheck:
                 ; .FSTART _winnerCheck
                 ; 0000 0066     for (r = 0; r < 8; r++)
000171 24aa      	CLR  R10
000172 24bb      	CLR  R11
                 _0x37:
000173 940e 0551 	CALL SUBOPT_0x4
000175 f434      	BRGE _0x38
                 ; 0000 0067         win[r] = 0;
000176 940e 0556 	CALL SUBOPT_0x5
000178 01f5      	MOVW R30,R10
000179 9631      	ADIW R30,1
00017a 015f      	MOVW R10,R30
00017b cff7      	RJMP _0x37
                 _0x38:
                 ; 0000 0068 for (r = 0; r < 3; r++)
00017c 24aa      	CLR  R10
00017d 24bb      	CLR  R11
                 _0x3A:
00017e 940e 0534 	CALL SUBOPT_0x0
000180 f00c      	BRLT PC+2
000181 c059      	RJMP _0x3B
                 ; 0000 0069         for (c = 0; c < 3; c++)
000182 24cc      	CLR  R12
000183 24dd      	CLR  R13
                 _0x3D:
000184 940e 0539 	CALL SUBOPT_0x1
000186 f00c      	BRLT PC+2
000187 c04f      	RJMP _0x3E
                 ; 0000 006A         {
                 ; 0000 006B             win[r] += game[r][c];
000188 940e 0576 	CALL SUBOPT_0x9
00018a 0fea      	ADD  R30,R26
00018b 1ffb      	ADC  R31,R27
00018c 01cf      	MOVW R24,R30
00018d 8160      	LD   R22,Z
00018e 8171      	LDD  R23,Z+1
00018f 940e 053e 	CALL SUBOPT_0x2
000191 940e 057c 	CALL SUBOPT_0xA
                 ; 0000 006C             win[r + 3] += game[c][r];
000193 01f5      	MOVW R30,R10
000194 9633      	ADIW R30,3
000195 eaaf      	LDI  R26,LOW(_win)
000196 e0b1      	LDI  R27,HIGH(_win)
000197 0fee      	LSL  R30
000198 1fff      	ROL  R31
000199 0fea      	ADD  R30,R26
00019a 1ffb      	ADC  R31,R27
00019b 01cf      	MOVW R24,R30
00019c 8160      	LD   R22,Z
00019d 8171      	LDD  R23,Z+1
00019e 01f6      	MOVW R30,R12
00019f e0a6      	LDI  R26,LOW(6)
0001a0 e0b0      	LDI  R27,HIGH(6)
0001a1 940e 05da 	CALL __MULW12U
0001a3 56e3      	SUBI R30,LOW(-_game)
0001a4 4ffe      	SBCI R31,HIGH(-_game)
0001a5 01df      	MOVW R26,R30
0001a6 01f5      	MOVW R30,R10
0001a7 0fee      	LSL  R30
0001a8 1fff      	ROL  R31
0001a9 0fae      	ADD  R26,R30
0001aa 1fbf      	ADC  R27,R31
0001ab 940e 057c 	CALL SUBOPT_0xA
                 ; 0000 006D             if (r == c)
                +
0001ad 14ca     +CP R12 , R10
0001ae 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
0001af f471      	BRNE _0x3F
                 ; 0000 006E                 win[6] += game[r][c];
0001b0 940e 053e 	CALL SUBOPT_0x2
0001b2 940e 05e2 	CALL __GETW1P
                +
0001b4 91a0 01bb+LDS R26 , _win + ( 12 )
0001b6 91b0 01bc+LDS R27 , _win + ( 12 ) + 1
                 	__GETW2MN _win,12
0001b8 0fea      	ADD  R30,R26
0001b9 1ffb      	ADC  R31,R27
                +
0001ba 93e0 01bb+STS _win + ( 12 ) , R30
0001bc 93f0 01bc+STS _win + ( 12 ) + 1 , R31
                 	__PUTW1MN _win,12
                 ; 0000 006F             if (r + c == 2)
                 _0x3F:
0001be 01f6      	MOVW R30,R12
0001bf 0dea      	ADD  R30,R10
0001c0 1dfb      	ADC  R31,R11
0001c1 30e2      	CPI  R30,LOW(0x2)
0001c2 e0a0      	LDI  R26,HIGH(0x2)
0001c3 07fa      	CPC  R31,R26
0001c4 f471      	BRNE _0x40
                 ; 0000 0070                 win[7] += game[r][c];
0001c5 940e 053e 	CALL SUBOPT_0x2
0001c7 940e 05e2 	CALL __GETW1P
                +
0001c9 91a0 01bd+LDS R26 , _win + ( 14 )
0001cb 91b0 01be+LDS R27 , _win + ( 14 ) + 1
                 	__GETW2MN _win,14
0001cd 0fea      	ADD  R30,R26
0001ce 1ffb      	ADC  R31,R27
                +
0001cf 93e0 01bd+STS _win + ( 14 ) , R30
0001d1 93f0 01be+STS _win + ( 14 ) + 1 , R31
                 	__PUTW1MN _win,14
                 ; 0000 0071         }
                 _0x40:
0001d3 01f6      	MOVW R30,R12
0001d4 9631      	ADIW R30,1
0001d5 016f      	MOVW R12,R30
0001d6 cfad      	RJMP _0x3D
                 _0x3E:
0001d7 01f5      	MOVW R30,R10
0001d8 9631      	ADIW R30,1
0001d9 015f      	MOVW R10,R30
0001da cfa3      	RJMP _0x3A
                 _0x3B:
                 ; 0000 0072 }
0001db 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0076     PORTC = 0xFF; // initial value
0001dc efef      	LDI  R30,LOW(255)
0001dd bbe5      	OUT  0x15,R30
                 ; 0000 0077     DDRC = 0x0F;  // input / output
0001de e0ef      	LDI  R30,LOW(15)
0001df bbe4      	OUT  0x14,R30
                 ; 0000 0078     PORTA = 0x00; // initial value
0001e0 e0e0      	LDI  R30,LOW(0)
0001e1 bbeb      	OUT  0x1B,R30
                 ; 0000 0079     DDRA = 0xFF;  // output
0001e2 efef      	LDI  R30,LOW(255)
0001e3 bbea      	OUT  0x1A,R30
                 ; 0000 007A     lcd_init(20);
0001e4 e1a4      	LDI  R26,LOW(20)
0001e5 940e 0334 	CALL _lcd_init
                 ; 0000 007B     init();
0001e7 deef      	RCALL _init
                 ; 0000 007C     showBoard();
0001e8 df58      	RCALL _showBoard
                 ; 0000 007D     while (state == 0)
                 _0x41:
0001e9 2c08      	MOV  R0,R8
0001ea 2809      	OR   R0,R9
0001eb f009      	BREQ PC+2
0001ec c069      	RJMP _0x43
                 ; 0000 007E     {
                 ; 0000 007F         keypad();
0001ed deaf      	RCALL _keypad
                 ; 0000 0080         if (r != 3 && c != 3)
0001ee e0e3      	LDI  R30,LOW(3)
0001ef e0f0      	LDI  R31,HIGH(3)
0001f0 15ea      	CP   R30,R10
0001f1 05fb      	CPC  R31,R11
0001f2 f019      	BREQ _0x45
0001f3 15ec      	CP   R30,R12
0001f4 05fd      	CPC  R31,R13
0001f5 f409      	BRNE _0x46
                 _0x45:
0001f6 c01e      	RJMP _0x44
                 _0x46:
                 ; 0000 0081         {
                 ; 0000 0082             if (game[r][c] == 0)
0001f7 940e 053e 	CALL SUBOPT_0x2
0001f9 940e 05e2 	CALL __GETW1P
0001fb 9730      	SBIW R30,0
0001fc f4c1      	BRNE _0x47
                 ; 0000 0083             {
                 ; 0000 0084                 if (player == 0)
0001fd 2c04      	MOV  R0,R4
0001fe 2805      	OR   R0,R5
0001ff f429      	BRNE _0x48
                 ; 0000 0085                     game[r][c] = 1;
000200 940e 053e 	CALL SUBOPT_0x2
000202 e0e1      	LDI  R30,LOW(1)
000203 e0f0      	LDI  R31,HIGH(1)
000204 c004      	RJMP _0x60
                 ; 0000 0086                 else
                 _0x48:
                 ; 0000 0087                     game[r][c] = -1;
000205 940e 053e 	CALL SUBOPT_0x2
000207 efef      	LDI  R30,LOW(65535)
000208 efff      	LDI  R31,HIGH(65535)
                 _0x60:
000209 93ed      	ST   X+,R30
00020a 93fc      	ST   X,R31
                 ; 0000 0088                 player = !player;
00020b 01f2      	MOVW R30,R4
00020c 940e 05d5 	CALL __LNEGW1
00020e 2e4e      	MOV  R4,R30
00020f 2455      	CLR  R5
                 ; 0000 0089                 PORTA = num[player];
000210 940e 056f 	CALL SUBOPT_0x8
                 ; 0000 008A                 count++;
000212 01f3      	MOVW R30,R6
000213 9631      	ADIW R30,1
000214 013f      	MOVW R6,R30
                 ; 0000 008B             }
                 ; 0000 008C         }
                 _0x47:
                 ; 0000 008D         k = r * 4 + c;
                 _0x44:
000215 01f5      	MOVW R30,R10
000216 940e 05cb 	CALL __LSLW2
000218 0dec      	ADD  R30,R12
000219 1dfd      	ADC  R31,R13
00021a 93e0 01bf 	STS  _k,R30
00021c 93f0 01c0 	STS  _k+1,R31
                 ; 0000 008E         if (k == 13)
00021e 940e 056a 	CALL SUBOPT_0x7
000220 971d      	SBIW R26,13
000221 f409      	BRNE _0x4A
                 ; 0000 008F             init();
000222 deb4      	RCALL _init
                 ; 0000 0090         showBoard();
                 _0x4A:
000223 df1d      	RCALL _showBoard
                 ; 0000 0091         winnerCheck();
000224 df4c      	RCALL _winnerCheck
                 ; 0000 0092         for (r = 0; r < 8; r++)
000225 24aa      	CLR  R10
000226 24bb      	CLR  R11
                 _0x4C:
000227 940e 0551 	CALL SUBOPT_0x4
000229 f4f4      	BRGE _0x4D
                 ; 0000 0093             if (win[r] == 3)
00022a 940e 0576 	CALL SUBOPT_0x9
00022c 0fae      	ADD  R26,R30
00022d 1fbf      	ADC  R27,R31
00022e 940e 05e2 	CALL __GETW1P
000230 30e3      	CPI  R30,LOW(0x3)
000231 e0a0      	LDI  R26,HIGH(0x3)
000232 07fa      	CPC  R31,R26
000233 f419      	BRNE _0x4E
                 ; 0000 0094                 state = 1;
000234 e0e1      	LDI  R30,LOW(1)
000235 e0f0      	LDI  R31,HIGH(1)
000236 c00c      	RJMP _0x61
                 ; 0000 0095             else if (win[r] == -3)
                 _0x4E:
000237 940e 0576 	CALL SUBOPT_0x9
000239 0fae      	ADD  R26,R30
00023a 1fbf      	ADC  R27,R31
00023b 940e 05e2 	CALL __GETW1P
00023d 3fed      	CPI  R30,LOW(0xFFFD)
00023e efaf      	LDI  R26,HIGH(0xFFFD)
00023f 07fa      	CPC  R31,R26
000240 f419      	BRNE _0x50
                 ; 0000 0096                 state = -1;
000241 efef      	LDI  R30,LOW(65535)
000242 efff      	LDI  R31,HIGH(65535)
                 _0x61:
000243 014f      	MOVW R8,R30
                 ; 0000 0097         if (count == 9 && state == 0)
                 _0x50:
000244 01f5      	MOVW R30,R10
000245 9631      	ADIW R30,1
000246 015f      	MOVW R10,R30
000247 cfdf      	RJMP _0x4C
                 _0x4D:
000248 e0e9      	LDI  R30,LOW(9)
000249 e0f0      	LDI  R31,HIGH(9)
00024a 15e6      	CP   R30,R6
00024b 05f7      	CPC  R31,R7
00024c f421      	BRNE _0x52
00024d 2400      	CLR  R0
00024e 1408      	CP   R0,R8
00024f 0409      	CPC  R0,R9
000250 f009      	BREQ _0x53
                 _0x52:
000251 c003      	RJMP _0x51
                 _0x53:
                 ; 0000 0098             state = 2;
000252 e0e2      	LDI  R30,LOW(2)
000253 e0f0      	LDI  R31,HIGH(2)
000254 014f      	MOVW R8,R30
                 ; 0000 0099     }
                 _0x51:
000255 cf93      	RJMP _0x41
                 _0x43:
                 ; 0000 009A     lcd_gotoxy(3, 3);
000256 e0e3      	LDI  R30,LOW(3)
000257 93ea      	ST   -Y,R30
000258 e0a3      	LDI  R26,LOW(3)
000259 940e 02c2 	CALL _lcd_gotoxy
                 ; 0000 009B 
                 ; 0000 009C     if (state == 1)
00025b e0e1      	LDI  R30,LOW(1)
00025c e0f0      	LDI  R31,HIGH(1)
00025d 15e8      	CP   R30,R8
00025e 05f9      	CPC  R31,R9
00025f f419      	BRNE _0x54
                 ; 0000 009D         lcd_puts("player X wins !!");
                +
000260 e7a6     +LDI R26 , LOW ( _0x55 + ( 0 ) )
000261 e0b1     +LDI R27 , HIGH ( _0x55 + ( 0 ) )
                 	__POINTW2MN _0x55,0
000262 c014      	RJMP _0x62
                 ; 0000 009E 
                 ; 0000 009F     else if (state == -1)
                 _0x54:
000263 efef      	LDI  R30,LOW(65535)
000264 efff      	LDI  R31,HIGH(65535)
000265 15e8      	CP   R30,R8
000266 05f9      	CPC  R31,R9
000267 f419      	BRNE _0x57
                 ; 0000 00A0         lcd_puts("player O wins !!");
                +
000268 e8a7     +LDI R26 , LOW ( _0x55 + ( 17 ) )
000269 e0b1     +LDI R27 , HIGH ( _0x55 + ( 17 ) )
                 	__POINTW2MN _0x55,17
00026a c00c      	RJMP _0x62
                 ; 0000 00A1 
                 ; 0000 00A2     else if (state == 2){
                 _0x57:
00026b e0e2      	LDI  R30,LOW(2)
00026c e0f0      	LDI  R31,HIGH(2)
00026d 15e8      	CP   R30,R8
00026e 05f9      	CPC  R31,R9
00026f f449      	BRNE _0x59
                 ; 0000 00A3         lcd_gotoxy(9,3);
000270 e0e9      	LDI  R30,LOW(9)
000271 93ea      	ST   -Y,R30
000272 e0a3      	LDI  R26,LOW(3)
000273 940e 02c2 	CALL _lcd_gotoxy
                 ; 0000 00A4         lcd_puts("Draw");
                +
000275 e9a8     +LDI R26 , LOW ( _0x55 + ( 34 ) )
000276 e0b1     +LDI R27 , HIGH ( _0x55 + ( 34 ) )
                 	__POINTW2MN _0x55,34
                 _0x62:
000277 940e 0312 	CALL _lcd_puts
                 ; 0000 00A5     }
                 ; 0000 00A6 
                 ; 0000 00A7     while (1)
                 _0x59:
                 _0x5A:
                 ; 0000 00A8     {
                 ; 0000 00A9         keypad();
000279 940e 055e 	CALL SUBOPT_0x6
                 ; 0000 00AA         k = r * 4 + c;
                 ; 0000 00AB         if (k == 13)
00027b 940e 056a 	CALL SUBOPT_0x7
00027d 971d      	SBIW R26,13
00027e f409      	BRNE _0x5D
                 ; 0000 00AC             init();
00027f de57      	RCALL _init
                 ; 0000 00AD     }
                 _0x5D:
000280 cff8      	RJMP _0x5A
                 ; 0000 00AE }
                 _0x5E:
000281 cfff      	RJMP _0x5E
                 ; .FEND
                 
                 	.DSEG
                 _0x55:
000176           	.BYTE 0x27
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000282 e0ff          ldi   r31,15
                 __lcd_delay0:
000283 95fa          dec   r31
000284 f7f1          brne  __lcd_delay0
000285 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000286 b3a1          in    r26,__lcd_direction
000287 70af          andi  r26,0xf                 ;set as input
000288 bba1          out   __lcd_direction,r26
000289 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00028a 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00028b dff6      	RCALL __lcd_delay_G100
00028c 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00028d dff4      	RCALL __lcd_delay_G100
00028e b3a0          in    r26,__lcd_pin
00028f 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000290 dff1      	RCALL __lcd_delay_G100
000291 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000292 dfef      	RCALL __lcd_delay_G100
000293 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000294 fda7          sbrc  r26,__lcd_busy_flag
000295 cff5          rjmp  __lcd_busy
000296 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000297 7fa0          andi  r26,0xf0
000298 2bab          or    r26,r27
000299 bba2          out   __lcd_port,r26          ;write
00029a 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00029b 940e 0282 	CALL __lcd_delay_G100
00029d 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00029e 940e 0282 	CALL __lcd_delay_G100
0002a0 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002a1 93aa      	ST   -Y,R26
0002a2 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002a3 b3a1          in    r26,__lcd_direction
0002a4 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002a5 bba1          out   __lcd_direction,r26
0002a6 b3b2          in    r27,__lcd_port
0002a7 70bf          andi  r27,0xf
0002a8 81a8          ld    r26,y
0002a9 dfed      	RCALL __lcd_write_nibble_G100
0002aa 81a8          ld    r26,y
0002ab 95a2          swap  r26
0002ac dfea      	RCALL __lcd_write_nibble_G100
0002ad 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0002ae 940c 0366 	JMP  _0x2080002
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0002b0 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0002b1 940e 0282 	CALL __lcd_delay_G100
0002b3 b3e0          in    r30,__lcd_pin           ;read
0002b4 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0002b5 940e 0282 	CALL __lcd_delay_G100
0002b7 7fe0          andi  r30,0xf0
0002b8 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0002b9 940e 0282 	CALL __lcd_delay_G100
0002bb dff4      	RCALL __lcd_read_nibble_G100
0002bc 2fae          mov   r26,r30
0002bd dff2      	RCALL __lcd_read_nibble_G100
0002be 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
0002bf 95e2          swap  r30
0002c0 2bea          or    r30,r26
0002c1 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c2 93aa      	ST   -Y,R26
0002c3 940e 0286 	CALL __lcd_ready
0002c5 81e8      	LD   R30,Y
0002c6 e0f0      	LDI  R31,0
0002c7 53e7      	SUBI R30,LOW(-__base_y_G100)
0002c8 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002c9 81e0      	LD   R30,Z
0002ca 81a9      	LDD  R26,Y+1
0002cb 0fae      	ADD  R26,R30
0002cc 940e 02a1 	CALL __lcd_write_data
0002ce 81e9      	LDD  R30,Y+1
0002cf 93e0 01cd 	STS  __lcd_x,R30
0002d1 81e8      	LD   R30,Y
0002d2 93e0 01ce 	STS  __lcd_y,R30
0002d4 9622      	ADIW R28,2
0002d5 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d6 940e 0286 	CALL __lcd_ready
0002d8 e0a2      	LDI  R26,LOW(2)
0002d9 940e 02a1 	CALL __lcd_write_data
0002db 940e 0286 	CALL __lcd_ready
0002dd e0ac      	LDI  R26,LOW(12)
0002de 940e 02a1 	CALL __lcd_write_data
0002e0 940e 0286 	CALL __lcd_ready
0002e2 e0a1      	LDI  R26,LOW(1)
0002e3 940e 02a1 	CALL __lcd_write_data
0002e5 e0e0      	LDI  R30,LOW(0)
0002e6 93e0 01ce 	STS  __lcd_y,R30
0002e8 93e0 01cd 	STS  __lcd_x,R30
0002ea 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002eb 93aa      	ST   -Y,R26
0002ec 93ef          push r30
0002ed 93ff          push r31
0002ee 81a8          ld   r26,y
0002ef 9468          set
0002f0 30aa          cpi  r26,10
0002f1 f039          breq __lcd_putchar1
0002f2 94e8          clt
0002f3 91e0 01cf 	LDS  R30,__lcd_maxx
0002f5 91a0 01cd 	LDS  R26,__lcd_x
0002f7 17ae      	CP   R26,R30
0002f8 f058      	BRLO _0x2000004
                 	__lcd_putchar1:
0002f9 91e0 01ce 	LDS  R30,__lcd_y
0002fb 5fef      	SUBI R30,-LOW(1)
0002fc 93e0 01ce 	STS  __lcd_y,R30
0002fe e0e0      	LDI  R30,LOW(0)
0002ff 93ea      	ST   -Y,R30
000300 91a0 01ce 	LDS  R26,__lcd_y
000302 dfbf      	RCALL _lcd_gotoxy
000303 f056      	brts __lcd_putchar0
                 _0x2000004:
000304 91e0 01cd 	LDS  R30,__lcd_x
000306 5fef      	SUBI R30,-LOW(1)
000307 93e0 01cd 	STS  __lcd_x,R30
000309 df7c          rcall __lcd_ready
00030a 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
00030b 81a8      	LD   R26,Y
00030c 940e 02a1 	CALL __lcd_write_data
                 __lcd_putchar0:
00030e 91ff          pop  r31
00030f 91ef          pop  r30
000310 940c 0366 	JMP  _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000312 93ba      	ST   -Y,R27
000313 93aa      	ST   -Y,R26
000314 931a      	ST   -Y,R17
                 _0x2000005:
000315 81a9      	LDD  R26,Y+1
000316 81ba      	LDD  R27,Y+1+1
000317 91ed      	LD   R30,X+
000318 83a9      	STD  Y+1,R26
000319 83ba      	STD  Y+1+1,R27
00031a 2f1e      	MOV  R17,R30
00031b 30e0      	CPI  R30,0
00031c f019      	BREQ _0x2000007
00031d 2fa1      	MOV  R26,R17
00031e dfcc      	RCALL _lcd_putchar
00031f cff5      	RJMP _0x2000005
                 _0x2000007:
000320 8118      	LDD  R17,Y+0
000321 9623      	ADIW R28,3
000322 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000323 27aa          clr   r26
000324 27bb          clr   r27
                 __long_delay0:
000325 9711          sbiw  r26,1         ;2 cycles
000326 f7f1          brne  __long_delay0 ;2 cycles
000327 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000328 93aa      	ST   -Y,R26
000329 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00032a b3a1          in    r26,__lcd_direction
00032b 6fa7          ori   r26,0xf7                ;set as output
00032c bba1          out   __lcd_direction,r26
00032d b3b2          in    r27,__lcd_port
00032e 70bf          andi  r27,0xf
00032f 81a8          ld    r26,y
000330 940e 0297 	CALL __lcd_write_nibble_G100
000332 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000333 c032      	RJMP _0x2080002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000334 93aa      	ST   -Y,R26
000335 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000336 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
000337 81e8      	LD   R30,Y
000338 93e0 01cf 	STS  __lcd_maxx,R30
00033a 58e0      	SUBI R30,-LOW(128)
                +
00033b 93e0 01cb+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00033d 81e8      	LD   R30,Y
00033e 54e0      	SUBI R30,-LOW(192)
                +
00033f 93e0 01cc+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000341 940e 0584 	CALL SUBOPT_0xB
000343 940e 0584 	CALL SUBOPT_0xB
000345 940e 0584 	CALL SUBOPT_0xB
000347 dfdb      	RCALL __long_delay_G100
000348 e2a0      	LDI  R26,LOW(32)
000349 dfde      	RCALL __lcd_init_write_G100
00034a dfd8      	RCALL __long_delay_G100
00034b e2a8      	LDI  R26,LOW(40)
00034c 940e 0589 	CALL SUBOPT_0xC
00034e e0a4      	LDI  R26,LOW(4)
00034f 940e 0589 	CALL SUBOPT_0xC
000351 e8a5      	LDI  R26,LOW(133)
000352 940e 0589 	CALL SUBOPT_0xC
000354 b3a1          in    r26,__lcd_direction
000355 70af          andi  r26,0xf                 ;set as input
000356 bba1          out   __lcd_direction,r26
000357 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000358 940e 02b9 	CALL _lcd_read_byte0_G100
00035a 30e5      	CPI  R30,LOW(0x5)
00035b f011      	BREQ _0x200000B
00035c e0e0      	LDI  R30,LOW(0)
00035d c008      	RJMP _0x2080002
                 _0x200000B:
00035e 940e 0286 	CALL __lcd_ready
000360 e0a6      	LDI  R26,LOW(6)
000361 940e 02a1 	CALL __lcd_write_data
000363 940e 02d6 	CALL _lcd_clear
000365 e0e1      	LDI  R30,LOW(1)
                 _0x2080002:
000366 9621      	ADIW R28,1
000367 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000368 93ba      	ST   -Y,R27
000369 93aa      	ST   -Y,R26
00036a 931a      	ST   -Y,R17
00036b 930a      	ST   -Y,R16
00036c 81aa      	LDD  R26,Y+2
00036d 81bb      	LDD  R27,Y+2+1
00036e 9612      	ADIW R26,2
00036f 940e 05e2 	CALL __GETW1P
000371 9730      	SBIW R30,0
000372 f159      	BREQ _0x2020010
000373 81aa      	LDD  R26,Y+2
000374 81bb      	LDD  R27,Y+2+1
000375 9614      	ADIW R26,4
000376 940e 05e2 	CALL __GETW1P
000378 018f      	MOVW R16,R30
000379 9730      	SBIW R30,0
00037a f061      	BREQ _0x2020012
                +
00037b 3002     +CPI R16 , LOW ( 2 )
00037c e0e0     +LDI R30 , HIGH ( 2 )
00037d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00037e f098      	BRLO _0x2020013
00037f 01f8      	MOVW R30,R16
000380 9731      	SBIW R30,1
000381 018f      	MOVW R16,R30
                +
000382 81aa     +LDD R26 , Y + 2
000383 81bb     +LDD R27 , Y + 2 + 1
000384 9614     +ADIW R26 , 4
000385 93ed     +ST X + , R30
000386 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000387 81aa      	LDD  R26,Y+2
000388 81bb      	LDD  R27,Y+2+1
000389 9612      	ADIW R26,2
00038a 91ed      	LD   R30,X+
00038b 91fd      	LD   R31,X+
00038c 9631      	ADIW R30,1
00038d 93fe      	ST   -X,R31
00038e 93ee      	ST   -X,R30
00038f 9731      	SBIW R30,1
000390 81ac      	LDD  R26,Y+4
000391 83a0      	STD  Z+0,R26
                 _0x2020013:
000392 81aa      	LDD  R26,Y+2
000393 81bb      	LDD  R27,Y+2+1
000394 940e 05e2 	CALL __GETW1P
000396 23ff      	TST  R31
000397 f02a      	BRMI _0x2020014
000398 91ed      	LD   R30,X+
000399 91fd      	LD   R31,X+
00039a 9631      	ADIW R30,1
00039b 93fe      	ST   -X,R31
00039c 93ee      	ST   -X,R30
                 _0x2020014:
00039d c006      	RJMP _0x2020015
                 _0x2020010:
00039e 81aa      	LDD  R26,Y+2
00039f 81bb      	LDD  R27,Y+2+1
0003a0 efef      	LDI  R30,LOW(65535)
0003a1 efff      	LDI  R31,HIGH(65535)
0003a2 93ed      	ST   X+,R30
0003a3 93fc      	ST   X,R31
                 _0x2020015:
0003a4 8119      	LDD  R17,Y+1
0003a5 8108      	LDD  R16,Y+0
0003a6 9625      	ADIW R28,5
0003a7 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003a8 93ba      	ST   -Y,R27
0003a9 93aa      	ST   -Y,R26
0003aa 9726      	SBIW R28,6
0003ab 940e 05ef 	CALL __SAVELOCR6
0003ad e010      	LDI  R17,0
0003ae 85ac      	LDD  R26,Y+12
0003af 85bd      	LDD  R27,Y+12+1
0003b0 940e 054c 	CALL SUBOPT_0x3
                 _0x2020016:
0003b2 89ea      	LDD  R30,Y+18
0003b3 89fb      	LDD  R31,Y+18+1
0003b4 9631      	ADIW R30,1
0003b5 8bea      	STD  Y+18,R30
0003b6 8bfb      	STD  Y+18+1,R31
0003b7 9731      	SBIW R30,1
0003b8 91e4      	LPM  R30,Z
0003b9 2f2e      	MOV  R18,R30
0003ba 30e0      	CPI  R30,0
0003bb f409      	BRNE PC+2
0003bc c115      	RJMP _0x2020018
0003bd 2fe1      	MOV  R30,R17
0003be 30e0      	CPI  R30,0
0003bf f439      	BRNE _0x202001C
0003c0 3225      	CPI  R18,37
0003c1 f411      	BRNE _0x202001D
0003c2 e011      	LDI  R17,LOW(1)
0003c3 c002      	RJMP _0x202001E
                 _0x202001D:
0003c4 940e 058d 	CALL SUBOPT_0xD
                 _0x202001E:
0003c6 c10a      	RJMP _0x202001B
                 _0x202001C:
0003c7 30e1      	CPI  R30,LOW(0x1)
0003c8 f4a9      	BRNE _0x202001F
0003c9 3225      	CPI  R18,37
0003ca f419      	BRNE _0x2020020
0003cb 940e 058d 	CALL SUBOPT_0xD
0003cd c102      	RJMP _0x20200CC
                 _0x2020020:
0003ce e012      	LDI  R17,LOW(2)
0003cf e040      	LDI  R20,LOW(0)
0003d0 e000      	LDI  R16,LOW(0)
0003d1 322d      	CPI  R18,45
0003d2 f411      	BRNE _0x2020021
0003d3 e001      	LDI  R16,LOW(1)
0003d4 c0fc      	RJMP _0x202001B
                 _0x2020021:
0003d5 322b      	CPI  R18,43
0003d6 f411      	BRNE _0x2020022
0003d7 e24b      	LDI  R20,LOW(43)
0003d8 c0f8      	RJMP _0x202001B
                 _0x2020022:
0003d9 3220      	CPI  R18,32
0003da f411      	BRNE _0x2020023
0003db e240      	LDI  R20,LOW(32)
0003dc c0f4      	RJMP _0x202001B
                 _0x2020023:
0003dd c002      	RJMP _0x2020024
                 _0x202001F:
0003de 30e2      	CPI  R30,LOW(0x2)
0003df f439      	BRNE _0x2020025
                 _0x2020024:
0003e0 e050      	LDI  R21,LOW(0)
0003e1 e013      	LDI  R17,LOW(3)
0003e2 3320      	CPI  R18,48
0003e3 f411      	BRNE _0x2020026
0003e4 6800      	ORI  R16,LOW(128)
0003e5 c0eb      	RJMP _0x202001B
                 _0x2020026:
0003e6 c003      	RJMP _0x2020027
                 _0x2020025:
0003e7 30e3      	CPI  R30,LOW(0x3)
0003e8 f009      	BREQ PC+2
0003e9 c0e7      	RJMP _0x202001B
                 _0x2020027:
0003ea 3320      	CPI  R18,48
0003eb f010      	BRLO _0x202002A
0003ec 332a      	CPI  R18,58
0003ed f008      	BRLO _0x202002B
                 _0x202002A:
0003ee c007      	RJMP _0x2020029
                 _0x202002B:
0003ef e0aa      	LDI  R26,LOW(10)
0003f0 9f5a      	MUL  R21,R26
0003f1 2d50      	MOV  R21,R0
0003f2 2fe2      	MOV  R30,R18
0003f3 53e0      	SUBI R30,LOW(48)
0003f4 0f5e      	ADD  R21,R30
0003f5 c0db      	RJMP _0x202001B
                 _0x2020029:
0003f6 2fe2      	MOV  R30,R18
0003f7 36e3      	CPI  R30,LOW(0x63)
0003f8 f449      	BRNE _0x202002F
0003f9 940e 0594 	CALL SUBOPT_0xE
0003fb 89e8      	LDD  R30,Y+16
0003fc 89f9      	LDD  R31,Y+16+1
0003fd 81a4      	LDD  R26,Z+4
0003fe 93aa      	ST   -Y,R26
0003ff 940e 059a 	CALL SUBOPT_0xF
000401 c0ce      	RJMP _0x2020030
                 _0x202002F:
000402 37e3      	CPI  R30,LOW(0x73)
000403 f441      	BRNE _0x2020032
000404 940e 0594 	CALL SUBOPT_0xE
000406 940e 05a0 	CALL SUBOPT_0x10
000408 940e 051b 	CALL _strlen
00040a 2f1e      	MOV  R17,R30
00040b c00a      	RJMP _0x2020033
                 _0x2020032:
00040c 37e0      	CPI  R30,LOW(0x70)
00040d f461      	BRNE _0x2020035
00040e 940e 0594 	CALL SUBOPT_0xE
000410 940e 05a0 	CALL SUBOPT_0x10
000412 940e 0527 	CALL _strlenf
000414 2f1e      	MOV  R17,R30
000415 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000416 6002      	ORI  R16,LOW(2)
000417 770f      	ANDI R16,LOW(127)
000418 e030      	LDI  R19,LOW(0)
000419 c034      	RJMP _0x2020036
                 _0x2020035:
00041a 36e4      	CPI  R30,LOW(0x64)
00041b f011      	BREQ _0x2020039
00041c 36e9      	CPI  R30,LOW(0x69)
00041d f411      	BRNE _0x202003A
                 _0x2020039:
00041e 6004      	ORI  R16,LOW(4)
00041f c002      	RJMP _0x202003B
                 _0x202003A:
000420 37e5      	CPI  R30,LOW(0x75)
000421 f431      	BRNE _0x202003C
                 _0x202003B:
000422 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000423 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000424 83ee      	STD  Y+6,R30
000425 83ff      	STD  Y+6+1,R31
000426 e015      	LDI  R17,LOW(5)
000427 c00c      	RJMP _0x202003D
                 _0x202003C:
000428 35e8      	CPI  R30,LOW(0x58)
000429 f411      	BRNE _0x202003F
00042a 6008      	ORI  R16,LOW(8)
00042b c003      	RJMP _0x2020040
                 _0x202003F:
00042c 37e8      	CPI  R30,LOW(0x78)
00042d f009      	BREQ PC+2
00042e c0a1      	RJMP _0x2020071
                 _0x2020040:
00042f e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000430 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000431 83ee      	STD  Y+6,R30
000432 83ff      	STD  Y+6+1,R31
000433 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000434 ff02      	SBRS R16,2
000435 c014      	RJMP _0x2020042
000436 940e 0594 	CALL SUBOPT_0xE
000438 940e 05aa 	CALL SUBOPT_0x11
00043a 85ab      	LDD  R26,Y+11
00043b 23aa      	TST  R26
00043c f43a      	BRPL _0x2020043
00043d 85ea      	LDD  R30,Y+10
00043e 85fb      	LDD  R31,Y+10+1
00043f 940e 05c7 	CALL __ANEGW1
000441 87ea      	STD  Y+10,R30
000442 87fb      	STD  Y+10+1,R31
000443 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000444 3040      	CPI  R20,0
000445 f011      	BREQ _0x2020044
000446 5f1f      	SUBI R17,-LOW(1)
000447 c001      	RJMP _0x2020045
                 _0x2020044:
000448 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000449 c004      	RJMP _0x2020046
                 _0x2020042:
00044a 940e 0594 	CALL SUBOPT_0xE
00044c 940e 05aa 	CALL SUBOPT_0x11
                 _0x2020046:
                 _0x2020036:
00044e fd00      	SBRC R16,0
00044f c011      	RJMP _0x2020047
                 _0x2020048:
000450 1715      	CP   R17,R21
000451 f478      	BRSH _0x202004A
000452 ff07      	SBRS R16,7
000453 c008      	RJMP _0x202004B
000454 ff02      	SBRS R16,2
000455 c004      	RJMP _0x202004C
000456 7f0b      	ANDI R16,LOW(251)
000457 2f24      	MOV  R18,R20
000458 5011      	SUBI R17,LOW(1)
000459 c001      	RJMP _0x202004D
                 _0x202004C:
00045a e320      	LDI  R18,LOW(48)
                 _0x202004D:
00045b c001      	RJMP _0x202004E
                 _0x202004B:
00045c e220      	LDI  R18,LOW(32)
                 _0x202004E:
00045d 940e 058d 	CALL SUBOPT_0xD
00045f 5051      	SUBI R21,LOW(1)
000460 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000461 2f31      	MOV  R19,R17
000462 ff01      	SBRS R16,1
000463 c017      	RJMP _0x202004F
                 _0x2020050:
000464 3030      	CPI  R19,0
000465 f0a1      	BREQ _0x2020052
000466 ff03      	SBRS R16,3
000467 c006      	RJMP _0x2020053
000468 81ee      	LDD  R30,Y+6
000469 81ff      	LDD  R31,Y+6+1
00046a 9125      	LPM  R18,Z+
00046b 83ee      	STD  Y+6,R30
00046c 83ff      	STD  Y+6+1,R31
00046d c005      	RJMP _0x2020054
                 _0x2020053:
00046e 81ae      	LDD  R26,Y+6
00046f 81bf      	LDD  R27,Y+6+1
000470 912d      	LD   R18,X+
000471 83ae      	STD  Y+6,R26
000472 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000473 940e 058d 	CALL SUBOPT_0xD
000475 3050      	CPI  R21,0
000476 f009      	BREQ _0x2020055
000477 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000478 5031      	SUBI R19,LOW(1)
000479 cfea      	RJMP _0x2020050
                 _0x2020052:
00047a c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00047b e320      	LDI  R18,LOW(48)
00047c 81ee      	LDD  R30,Y+6
00047d 81ff      	LDD  R31,Y+6+1
00047e 940e 05e6 	CALL __GETW1PF
000480 87e8      	STD  Y+8,R30
000481 87f9      	STD  Y+8+1,R31
000482 81ee      	LDD  R30,Y+6
000483 81ff      	LDD  R31,Y+6+1
000484 9632      	ADIW R30,2
000485 83ee      	STD  Y+6,R30
000486 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000487 85e8      	LDD  R30,Y+8
000488 85f9      	LDD  R31,Y+8+1
000489 85aa      	LDD  R26,Y+10
00048a 85bb      	LDD  R27,Y+10+1
00048b 17ae      	CP   R26,R30
00048c 07bf      	CPC  R27,R31
00048d f050      	BRLO _0x202005C
00048e 5f2f      	SUBI R18,-LOW(1)
00048f 85a8      	LDD  R26,Y+8
000490 85b9      	LDD  R27,Y+8+1
000491 85ea      	LDD  R30,Y+10
000492 85fb      	LDD  R31,Y+10+1
000493 1bea      	SUB  R30,R26
000494 0bfb      	SBC  R31,R27
000495 87ea      	STD  Y+10,R30
000496 87fb      	STD  Y+10+1,R31
000497 cfef      	RJMP _0x202005A
                 _0x202005C:
000498 332a      	CPI  R18,58
000499 f028      	BRLO _0x202005D
00049a ff03      	SBRS R16,3
00049b c002      	RJMP _0x202005E
00049c 5f29      	SUBI R18,-LOW(7)
00049d c001      	RJMP _0x202005F
                 _0x202005E:
00049e 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00049f fd04      	SBRC R16,4
0004a0 c01a      	RJMP _0x2020061
0004a1 3321      	CPI  R18,49
0004a2 f420      	BRSH _0x2020063
0004a3 85a8      	LDD  R26,Y+8
0004a4 85b9      	LDD  R27,Y+8+1
0004a5 9711      	SBIW R26,1
0004a6 f409      	BRNE _0x2020062
                 _0x2020063:
0004a7 c009      	RJMP _0x20200CD
                 _0x2020062:
0004a8 1753      	CP   R21,R19
0004a9 f010      	BRLO _0x2020067
0004aa ff00      	SBRS R16,0
0004ab c001      	RJMP _0x2020068
                 _0x2020067:
0004ac c013      	RJMP _0x2020066
                 _0x2020068:
0004ad e220      	LDI  R18,LOW(32)
0004ae ff07      	SBRS R16,7
0004af c00b      	RJMP _0x2020069
0004b0 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004b1 6100      	ORI  R16,LOW(16)
0004b2 ff02      	SBRS R16,2
0004b3 c007      	RJMP _0x202006A
0004b4 7f0b      	ANDI R16,LOW(251)
0004b5 934a      	ST   -Y,R20
0004b6 940e 059a 	CALL SUBOPT_0xF
0004b8 3050      	CPI  R21,0
0004b9 f009      	BREQ _0x202006B
0004ba 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004bb 940e 058d 	CALL SUBOPT_0xD
0004bd 3050      	CPI  R21,0
0004be f009      	BREQ _0x202006C
0004bf 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004c0 5031      	SUBI R19,LOW(1)
0004c1 85a8      	LDD  R26,Y+8
0004c2 85b9      	LDD  R27,Y+8+1
0004c3 9712      	SBIW R26,2
0004c4 f008      	BRLO _0x2020059
0004c5 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004c6 ff00      	SBRS R16,0
0004c7 c008      	RJMP _0x202006D
                 _0x202006E:
0004c8 3050      	CPI  R21,0
0004c9 f031      	BREQ _0x2020070
0004ca 5051      	SUBI R21,LOW(1)
0004cb e2e0      	LDI  R30,LOW(32)
0004cc 93ea      	ST   -Y,R30
0004cd 940e 059a 	CALL SUBOPT_0xF
0004cf cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004d0 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004d1 cee0      	RJMP _0x2020016
                 _0x2020018:
0004d2 85ac      	LDD  R26,Y+12
0004d3 85bd      	LDD  R27,Y+12+1
0004d4 940e 05e2 	CALL __GETW1P
0004d6 940e 05f6 	CALL __LOADLOCR6
0004d8 9664      	ADIW R28,20
0004d9 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004da 92ff      	PUSH R15
0004db 2ef8      	MOV  R15,R24
0004dc 9726      	SBIW R28,6
0004dd 940e 05f1 	CALL __SAVELOCR4
0004df 940e 05b2 	CALL SUBOPT_0x12
0004e1 9730      	SBIW R30,0
0004e2 f419      	BRNE _0x2020072
0004e3 efef      	LDI  R30,LOW(65535)
0004e4 efff      	LDI  R31,HIGH(65535)
0004e5 c023      	RJMP _0x2080001
                 _0x2020072:
0004e6 01de      	MOVW R26,R28
0004e7 9616      	ADIW R26,6
0004e8 940e 05c3 	CALL __ADDW2R15
0004ea 018d      	MOVW R16,R26
0004eb 940e 05b2 	CALL SUBOPT_0x12
0004ed 83ee      	STD  Y+6,R30
0004ee 83ff      	STD  Y+6+1,R31
0004ef e0e0      	LDI  R30,LOW(0)
0004f0 87e8      	STD  Y+8,R30
0004f1 87e9      	STD  Y+8+1,R30
0004f2 01de      	MOVW R26,R28
0004f3 961a      	ADIW R26,10
0004f4 940e 05c3 	CALL __ADDW2R15
0004f6 940e 05e2 	CALL __GETW1P
0004f8 93fa      	ST   -Y,R31
0004f9 93ea      	ST   -Y,R30
0004fa 931a      	ST   -Y,R17
0004fb 930a      	ST   -Y,R16
0004fc e6e8      	LDI  R30,LOW(_put_buff_G101)
0004fd e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004fe 93fa      	ST   -Y,R31
0004ff 93ea      	ST   -Y,R30
000500 01de      	MOVW R26,R28
000501 961a      	ADIW R26,10
000502 dea5      	RCALL __print_G101
000503 019f      	MOVW R18,R30
000504 81ae      	LDD  R26,Y+6
000505 81bf      	LDD  R27,Y+6+1
000506 e0e0      	LDI  R30,LOW(0)
000507 93ec      	ST   X,R30
000508 01f9      	MOVW R30,R18
                 _0x2080001:
000509 940e 05f8 	CALL __LOADLOCR4
00050b 962a      	ADIW R28,10
00050c 90ff      	POP  R15
00050d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpy:
                 ; .FSTART _strcpy
00050e 93ba      	ST   -Y,R27
00050f 93aa      	ST   -Y,R26
000510 91e9          ld   r30,y+
000511 91f9          ld   r31,y+
000512 91a9          ld   r26,y+
000513 91b9          ld   r27,y+
000514 01cd          movw r24,r26
                 strcpy0:
000515 9161          ld   r22,z+
000516 936d          st   x+,r22
000517 2366          tst  r22
000518 f7e1          brne strcpy0
000519 01fc          movw r30,r24
00051a 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
00051b 93ba      	ST   -Y,R27
00051c 93aa      	ST   -Y,R26
00051d 91a9          ld   r26,y+
00051e 91b9          ld   r27,y+
00051f 27ee          clr  r30
000520 27ff          clr  r31
                 strlen0:
000521 916d          ld   r22,x+
000522 2366          tst  r22
000523 f011          breq strlen1
000524 9631          adiw r30,1
000525 cffb          rjmp strlen0
                 strlen1:
000526 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000527 93ba      	ST   -Y,R27
000528 93aa      	ST   -Y,R26
000529 27aa          clr  r26
00052a 27bb          clr  r27
00052b 91e9          ld   r30,y+
00052c 91f9          ld   r31,y+
                 strlenf0:
00052d 9005      	lpm  r0,z+
00052e 2000          tst  r0
00052f f011          breq strlenf1
000530 9611          adiw r26,1
000531 cffb          rjmp strlenf0
                 strlenf1:
000532 01fd          movw r30,r26
000533 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _game:
00019d           	.BYTE 0x12
                 _win:
0001af           	.BYTE 0x10
                 _k:
0001bf           	.BYTE 0x2
                 _row:
0001c1           	.BYTE 0x4
                 _txt:
0001c5           	.BYTE 0x2
                 _num:
0001c7           	.BYTE 0x2
                 __base_y_G100:
0001c9           	.BYTE 0x4
                 __lcd_x:
0001cd           	.BYTE 0x1
                 __lcd_y:
0001ce           	.BYTE 0x1
                 __lcd_maxx:
0001cf           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000534 e0e3      	LDI  R30,LOW(3)
000535 e0f0      	LDI  R31,HIGH(3)
000536 16ae      	CP   R10,R30
000537 06bf      	CPC  R11,R31
000538 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000539 e0e3      	LDI  R30,LOW(3)
00053a e0f0      	LDI  R31,HIGH(3)
00053b 16ce      	CP   R12,R30
00053c 06df      	CPC  R13,R31
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:85 WORDS
                 SUBOPT_0x2:
00053e 01f5      	MOVW R30,R10
00053f e0a6      	LDI  R26,LOW(6)
000540 e0b0      	LDI  R27,HIGH(6)
000541 940e 05da 	CALL __MULW12U
000543 56e3      	SUBI R30,LOW(-_game)
000544 4ffe      	SBCI R31,HIGH(-_game)
000545 01df      	MOVW R26,R30
000546 01f6      	MOVW R30,R12
000547 0fee      	LSL  R30
000548 1fff      	ROL  R31
000549 0fae      	ADD  R26,R30
00054a 1fbf      	ADC  R27,R31
00054b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00054c e0e0      	LDI  R30,LOW(0)
00054d e0f0      	LDI  R31,HIGH(0)
00054e 93ed      	ST   X+,R30
00054f 93fc      	ST   X,R31
000550 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000551 e0e8      	LDI  R30,LOW(8)
000552 e0f0      	LDI  R31,HIGH(8)
000553 16ae      	CP   R10,R30
000554 06bf      	CPC  R11,R31
000555 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000556 01f5      	MOVW R30,R10
000557 eaaf      	LDI  R26,LOW(_win)
000558 e0b1      	LDI  R27,HIGH(_win)
000559 0fee      	LSL  R30
00055a 1fff      	ROL  R31
00055b 0fae      	ADD  R26,R30
00055c 1fbf      	ADC  R27,R31
00055d cfee      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
00055e 940e 009d 	CALL _keypad
000560 01f5      	MOVW R30,R10
000561 940e 05cb 	CALL __LSLW2
000563 0dec      	ADD  R30,R12
000564 1dfd      	ADC  R31,R13
000565 93e0 01bf 	STS  _k,R30
000567 93f0 01c0 	STS  _k+1,R31
000569 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00056a 91a0 01bf 	LDS  R26,_k
00056c 91b0 01c0 	LDS  R27,_k+1
00056e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00056f eca7      	LDI  R26,LOW(_num)
000570 e0b1      	LDI  R27,HIGH(_num)
000571 0da4      	ADD  R26,R4
000572 1db5      	ADC  R27,R5
000573 91ec      	LD   R30,X
000574 bbeb      	OUT  0x1B,R30
000575 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000576 01f5      	MOVW R30,R10
000577 eaaf      	LDI  R26,LOW(_win)
000578 e0b1      	LDI  R27,HIGH(_win)
000579 0fee      	LSL  R30
00057a 1fff      	ROL  R31
00057b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
00057c 940e 05e2 	CALL __GETW1P
00057e 0fe6      	ADD  R30,R22
00057f 1ff7      	ADC  R31,R23
000580 01dc      	MOVW R26,R24
000581 93ed      	ST   X+,R30
000582 93fc      	ST   X,R31
000583 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000584 940e 0323 	CALL __long_delay_G100
000586 e3a0      	LDI  R26,LOW(48)
000587 940c 0328 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000589 940e 02a1 	CALL __lcd_write_data
00058b 940c 0323 	JMP  __long_delay_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
00058d 932a      	ST   -Y,R18
00058e 85ad      	LDD  R26,Y+13
00058f 85be      	LDD  R27,Y+13+1
000590 85ef      	LDD  R30,Y+15
000591 89f8      	LDD  R31,Y+15+1
000592 9509      	ICALL
000593 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000594 89e8      	LDD  R30,Y+16
000595 89f9      	LDD  R31,Y+16+1
000596 9734      	SBIW R30,4
000597 8be8      	STD  Y+16,R30
000598 8bf9      	STD  Y+16+1,R31
000599 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00059a 85ad      	LDD  R26,Y+13
00059b 85be      	LDD  R27,Y+13+1
00059c 85ef      	LDD  R30,Y+15
00059d 89f8      	LDD  R31,Y+15+1
00059e 9509      	ICALL
00059f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0005a0 89a8      	LDD  R26,Y+16
0005a1 89b9      	LDD  R27,Y+16+1
0005a2 9614      	ADIW R26,4
0005a3 940e 05e2 	CALL __GETW1P
0005a5 83ee      	STD  Y+6,R30
0005a6 83ff      	STD  Y+6+1,R31
0005a7 81ae      	LDD  R26,Y+6
0005a8 81bf      	LDD  R27,Y+6+1
0005a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
0005aa 89a8      	LDD  R26,Y+16
0005ab 89b9      	LDD  R27,Y+16+1
0005ac 9614      	ADIW R26,4
0005ad 940e 05e2 	CALL __GETW1P
0005af 87ea      	STD  Y+10,R30
0005b0 87fb      	STD  Y+10+1,R31
0005b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0005b2 01de      	MOVW R26,R28
0005b3 961c      	ADIW R26,12
0005b4 940e 05c3 	CALL __ADDW2R15
0005b6 940e 05e2 	CALL __GETW1P
0005b8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005b9 9610      	adiw r26,0
0005ba f039      	breq __delay_ms1
                 __delay_ms0:
0005bb 95a8      	wdr
                +
0005bc ed80     +LDI R24 , LOW ( 0x7D0 )
0005bd e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005be 9701     +SBIW R24 , 1
0005bf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005c0 9711      	sbiw r26,1
0005c1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005c2 9508      	ret
                 
                 __ADDW2R15:
0005c3 2400      	CLR  R0
0005c4 0daf      	ADD  R26,R15
0005c5 1db0      	ADC  R27,R0
0005c6 9508      	RET
                 
                 __ANEGW1:
0005c7 95f1      	NEG  R31
0005c8 95e1      	NEG  R30
0005c9 40f0      	SBCI R31,0
0005ca 9508      	RET
                 
                 __LSLW2:
0005cb 0fee      	LSL  R30
0005cc 1fff      	ROL  R31
0005cd 0fee      	LSL  R30
0005ce 1fff      	ROL  R31
0005cf 9508      	RET
                 
                 __CWD1:
0005d0 2f6f      	MOV  R22,R31
0005d1 0f66      	ADD  R22,R22
0005d2 0b66      	SBC  R22,R22
0005d3 2f76      	MOV  R23,R22
0005d4 9508      	RET
                 
                 __LNEGW1:
0005d5 2bef      	OR   R30,R31
0005d6 e0e1      	LDI  R30,1
0005d7 f009      	BREQ __LNEGW1F
0005d8 e0e0      	LDI  R30,0
                 __LNEGW1F:
0005d9 9508      	RET
                 
                 __MULW12U:
0005da 9ffa      	MUL  R31,R26
0005db 2df0      	MOV  R31,R0
0005dc 9feb      	MUL  R30,R27
0005dd 0df0      	ADD  R31,R0
0005de 9fea      	MUL  R30,R26
0005df 2de0      	MOV  R30,R0
0005e0 0df1      	ADD  R31,R1
0005e1 9508      	RET
                 
                 __GETW1P:
0005e2 91ed      	LD   R30,X+
0005e3 91fc      	LD   R31,X
0005e4 9711      	SBIW R26,1
0005e5 9508      	RET
                 
                 __GETW1PF:
0005e6 9005      	LPM  R0,Z+
0005e7 91f4      	LPM  R31,Z
0005e8 2de0      	MOV  R30,R0
0005e9 9508      	RET
                 
                 __PUTPARD1:
0005ea 937a      	ST   -Y,R23
0005eb 936a      	ST   -Y,R22
0005ec 93fa      	ST   -Y,R31
0005ed 93ea      	ST   -Y,R30
0005ee 9508      	RET
                 
                 __SAVELOCR6:
0005ef 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005f0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005f1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005f2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005f3 931a      	ST   -Y,R17
0005f4 930a      	ST   -Y,R16
0005f5 9508      	RET
                 
                 __LOADLOCR6:
0005f6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005f7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005f8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005f9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005fa 8119      	LDD  R17,Y+1
0005fb 8108      	LD   R16,Y
0005fc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  24 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   4 r6 :   4 r7 :   2 
r8 :   8 r9 :   6 r10:  42 r11:  16 r12:  25 r13:  11 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  17 r23:   5 
r24:  16 r25:   3 r26: 170 r27:  72 r28:  14 r29:   1 r30: 307 r31: 133 
x  :  30 y  : 172 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  21 
adiw  :  36 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   2 brmi  :   1 brne  :  42 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 131 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :  21 cpi   :  38 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  26 ld    :  33 ldd   :  77 ldi   : 161 
lds   :  11 lpm   :  14 lsl   :   7 lsr   :   0 mov   :  22 movw  :  64 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   8 out   :  18 pop   :   3 push  :   3 rcall :  22 ret   :  48 
reti  :   0 rjmp  :  91 rol   :   7 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   9 sbic  :   4 sbis  :   4 sbiw  :  23 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  69 std   :  31 sts   :  17 sub   :   1 subi  :  20 swap  :   2 
tst   :   5 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bfa   2926    140   3066   16384  18.7%
[.dseg] 0x000060 0x0001d0      0    112    112    1024  10.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
