
AVRASM ver. 2.1.30  C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm Thu Jun 08 20:23:36 2023

C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\sama\Desktop\XO\Debug\List\xoGame.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _player=R4
                 	.DEF _player_msb=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF _state=R8
                 	.DEF _state_msb=R9
                 	.DEF _r=R10
                 	.DEF _r_msb=R11
                 	.DEF _c=R12
                 	.DEF _c_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 fdfe
000034 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x0:
000035 5000
000036 6572
000037 7373
000038 4f20      	.DB  0x0,0x50,0x72,0x65,0x73,0x73,0x20,0x4F
000039 204e
00003a 6f74
00003b 5320
00003c 6174      	.DB  0x4E,0x20,0x74,0x6F,0x20,0x53,0x74,0x61
00003d 7472
00003e 2e2e
00003f 002e
000040 6425      	.DB  0x72,0x74,0x2E,0x2E,0x2E,0x0,0x25,0x64
000041 5800
000042 7720
000043 6e69
000044 2173      	.DB  0x0,0x58,0x20,0x77,0x69,0x6E,0x73,0x21
000045 4f00
000046 7720
000047 6e69
000048 2173      	.DB  0x0,0x4F,0x20,0x77,0x69,0x6E,0x73,0x21
000049 4400
00004a 6172
00004b 0077      	.DB  0x0,0x44,0x72,0x61,0x77,0x0
                 _0x2000003:
00004c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004d 0004      	.DW  0x04
00004e 01af      	.DW  _row
00004f 0066      	.DW  _0x3*2
                 
000050 0001      	.DW  0x01
000051 0160      	.DW  _0x1B
000052 006a      	.DW  _0x0*2
                 
000053 0015      	.DW  0x15
000054 0161      	.DW  _0x1B+1
000055 006b      	.DW  _0x0*2+1
                 
000056 0008      	.DW  0x08
000057 0176      	.DW  _0x55
000058 0083      	.DW  _0x0*2+25
                 
000059 0008      	.DW  0x08
00005a 017e      	.DW  _0x55+8
00005b 008b      	.DW  _0x0*2+33
                 
00005c 0005      	.DW  0x05
00005d 0186      	.DW  _0x55+16
00005e 0093      	.DW  _0x0*2+41
                 
00005f 0002      	.DW  0x02
000060 01b5      	.DW  __base_y_G100
000061 0098      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bffb      	OUT  GICR,R31
000068 bfeb      	OUT  GICR,R30
000069 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000076 e9ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000077 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000078 9185      	LPM  R24,Z+
000079 9195      	LPM  R25,Z+
00007a 9700      	SBIW R24,0
00007b f061      	BREQ __GLOBAL_INI_END
00007c 91a5      	LPM  R26,Z+
00007d 91b5      	LPM  R27,Z+
00007e 9005      	LPM  R0,Z+
00007f 9015      	LPM  R1,Z+
000080 01bf      	MOVW R22,R30
000081 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000082 9005      	LPM  R0,Z+
000083 920d      	ST   X+,R0
000084 9701      	SBIW R24,1
000085 f7e1      	BRNE __GLOBAL_INI_LOOP
000086 01fb      	MOVW R30,R22
000087 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 01cf 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <lcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;#asm
                 .equ __lcd_port = 0x12
                 ; 0000 0009 #endasm
                 ;
                 ;    // global variable
                 ;int game_board[3][3];
                 ;int win[8];
                 ;int player, count, state;
                 ;int r, c, k;
                 ;unsigned char row[4] = {0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char txt[2];
                 ;
                 ;void keypad()
                 ; 0000 0014 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0015     while (1)
                 _0x4:
                 ; 0000 0016     {
                 ; 0000 0017         for (r = 0; r < 4; r++)
000090 24aa      	CLR  R10
000091 24bb      	CLR  R11
                 _0x8:
000092 e0e4      	LDI  R30,LOW(4)
000093 e0f0      	LDI  R31,HIGH(4)
000094 16ae      	CP   R10,R30
000095 06bf      	CPC  R11,R31
000096 f5a4      	BRGE _0x9
                 ; 0000 0018         {
                 ; 0000 0019             c = -10;
000097 efe6      	LDI  R30,LOW(65526)
000098 efff      	LDI  R31,HIGH(65526)
000099 016f      	MOVW R12,R30
                 ; 0000 001A             PORTC = row[r];
00009a eaaf      	LDI  R26,LOW(_row)
00009b e0b1      	LDI  R27,HIGH(_row)
00009c 0daa      	ADD  R26,R10
00009d 1dbb      	ADC  R27,R11
00009e 91ec      	LD   R30,X
00009f bbe5      	OUT  0x15,R30
                 ; 0000 001B             DDRC = 0x0F;
0000a0 e0ef      	LDI  R30,LOW(15)
0000a1 bbe4      	OUT  0x14,R30
                 ; 0000 001C             if (PINC .4 == 0)
0000a2 999c      	SBIC 0x13,4
0000a3 c002      	RJMP _0xA
                 ; 0000 001D                 c = 0;
0000a4 24cc      	CLR  R12
0000a5 24dd      	CLR  R13
                 ; 0000 001E             if (PINC .5 == 1)
                 _0xA:
0000a6 9b9d      	SBIS 0x13,5
0000a7 c003      	RJMP _0xB
                 ; 0000 001F                 c = 1;
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 e0f0      	LDI  R31,HIGH(1)
0000aa 016f      	MOVW R12,R30
                 ; 0000 0020             if (PINC .6 == 1)
                 _0xB:
0000ab 9b9e      	SBIS 0x13,6
0000ac c003      	RJMP _0xC
                 ; 0000 0021                 c = 2;
0000ad e0e2      	LDI  R30,LOW(2)
0000ae e0f0      	LDI  R31,HIGH(2)
0000af 016f      	MOVW R12,R30
                 ; 0000 0022             if (PINC .7 == 1)
                 _0xC:
0000b0 9b9f      	SBIS 0x13,7
0000b1 c003      	RJMP _0xD
                 ; 0000 0023                 c = 3;
0000b2 e0e3      	LDI  R30,LOW(3)
0000b3 e0f0      	LDI  R31,HIGH(3)
0000b4 016f      	MOVW R12,R30
                 ; 0000 0024 
                 ; 0000 0025             if (!(c == -10))
                 _0xD:
0000b5 efe6      	LDI  R30,LOW(65526)
0000b6 efff      	LDI  R31,HIGH(65526)
0000b7 15ec      	CP   R30,R12
0000b8 05fd      	CPC  R31,R13
0000b9 f049      	BREQ _0xE
                 ; 0000 0026             {
                 ; 0000 0027                 while (PINC .4 == 0)
                 _0xF:
0000ba 9b9c      	SBIS 0x13,4
                 ; 0000 0028                     ;
0000bb cffe      	RJMP _0xF
                 ; 0000 0029                 while (PINC .5 == 0)
                 _0x12:
0000bc 9b9d      	SBIS 0x13,5
                 ; 0000 002A                     ;
0000bd cffe      	RJMP _0x12
                 ; 0000 002B                 while (PINC .6 == 0)
                 _0x15:
0000be 9b9e      	SBIS 0x13,6
                 ; 0000 002C                     ;
0000bf cffe      	RJMP _0x15
                 ; 0000 002D                 while (PINC .7 == 0)
                 _0x18:
0000c0 9b9f      	SBIS 0x13,7
                 ; 0000 002E                     ;
0000c1 cffe      	RJMP _0x18
                 ; 0000 002F                 return;
0000c2 9508      	RET
                 ; 0000 0030             }
                 ; 0000 0031             delay_ms(5);
                 _0xE:
0000c3 e0a5      	LDI  R26,LOW(5)
0000c4 e0b0      	LDI  R27,0
0000c5 940e 059a 	CALL _delay_ms
                 ; 0000 0032         }
0000c7 01f5      	MOVW R30,R10
0000c8 9631      	ADIW R30,1
0000c9 015f      	MOVW R10,R30
0000ca cfc7      	RJMP _0x8
                 _0x9:
                 ; 0000 0033     }
0000cb cfc4      	RJMP _0x4
                 ; 0000 0034 }
                 ; .FEND
                 ;
                 ;void init()
                 ; 0000 0037 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0038     player = 0; // player==0 player X gonna play OR player==1 player O gonna play
0000cc 2444      	CLR  R4
0000cd 2455      	CLR  R5
                 ; 0000 0039     count = 0;
0000ce 2466      	CLR  R6
0000cf 2477      	CLR  R7
                 ; 0000 003A     state = 0; // state 0 -> play   state 1 -> player X wins  state 2 -> player O wins
0000d0 2488      	CLR  R8
0000d1 2499      	CLR  R9
                 ; 0000 003B     strcpy(txt, "");
0000d2 ebe3      	LDI  R30,LOW(_txt)
0000d3 e0f1      	LDI  R31,HIGH(_txt)
0000d4 93fa      	ST   -Y,R31
0000d5 93ea      	ST   -Y,R30
                +
0000d6 e6a0     +LDI R26 , LOW ( _0x1B + ( 0 ) )
0000d7 e0b1     +LDI R27 , HIGH ( _0x1B + ( 0 ) )
                 	__POINTW2MN _0x1B,0
0000d8 940e 04f6 	CALL _strcpy
                 ; 0000 003C     for (r = 0; r < 3; r++)
0000da 24aa      	CLR  R10
0000db 24bb      	CLR  R11
                 _0x1D:
0000dc 940e 051c 	CALL SUBOPT_0x0
0000de f48c      	BRGE _0x1E
                 ; 0000 003D         for (c = 0; c < 3; c++)
0000df 24cc      	CLR  R12
0000e0 24dd      	CLR  R13
                 _0x20:
0000e1 940e 0521 	CALL SUBOPT_0x1
0000e3 f444      	BRGE _0x21
                 ; 0000 003E             game_board[r][c] = 0; // filling our game_board with 0
0000e4 940e 0526 	CALL SUBOPT_0x2
0000e6 940e 0534 	CALL SUBOPT_0x3
0000e8 01f6      	MOVW R30,R12
0000e9 9631      	ADIW R30,1
0000ea 016f      	MOVW R12,R30
0000eb cff5      	RJMP _0x20
                 _0x21:
                 ; 0000 0040 for (r = 0; r < 8 ;r++)
0000ec 01f5      	MOVW R30,R10
0000ed 9631      	ADIW R30,1
0000ee 015f      	MOVW R10,R30
0000ef cfec      	RJMP _0x1D
                 _0x1E:
0000f0 24aa      	CLR  R10
0000f1 24bb      	CLR  R11
                 _0x23:
0000f2 940e 0539 	CALL SUBOPT_0x4
0000f4 f434      	BRGE _0x24
                 ; 0000 0041         win[r] = 0; // filling our win_board with 0
0000f5 940e 053e 	CALL SUBOPT_0x5
0000f7 01f5      	MOVW R30,R10
0000f8 9631      	ADIW R30,1
0000f9 015f      	MOVW R10,R30
0000fa cff7      	RJMP _0x23
                 _0x24:
                 ; 0000 0042 r = 0;
0000fb 24aa      	CLR  R10
0000fc 24bb      	CLR  R11
                 ; 0000 0043     c = 0;
0000fd 24cc      	CLR  R12
0000fe 24dd      	CLR  R13
                 ; 0000 0044     lcd_clear();
0000ff 940e 02be 	CALL _lcd_clear
                 ; 0000 0045     lcd_puts("Press ON to Start...");
                +
000101 e6a1     +LDI R26 , LOW ( _0x1B + ( 1 ) )
000102 e0b1     +LDI R27 , HIGH ( _0x1B + ( 1 ) )
                 	__POINTW2MN _0x1B,1
000103 940e 02fa 	CALL _lcd_puts
                 ; 0000 0046 
                 ; 0000 0047     do
                 _0x26:
                 ; 0000 0048     {
                 ; 0000 0049         keypad();
000105 940e 0546 	CALL SUBOPT_0x6
                 ; 0000 004A         k = r * 4 + c; // number between 0 to 15
                 ; 0000 004B     } while (k != 12);
000107 940e 0552 	CALL SUBOPT_0x7
000109 971c      	SBIW R26,12
00010a f7d1      	BRNE _0x26
                 ; 0000 004C 
                 ; 0000 004D     lcd_clear();
00010b 940e 02be 	CALL _lcd_clear
                 ; 0000 004E     for (r = 3; r > 0; r--)
00010d e0e3      	LDI  R30,LOW(3)
00010e e0f0      	LDI  R31,HIGH(3)
00010f 015f      	MOVW R10,R30
                 _0x29:
000110 2400      	CLR  R0
000111 140a      	CP   R0,R10
000112 040b      	CPC  R0,R11
000113 f4fc      	BRGE _0x2A
                 ; 0000 004F     {
                 ; 0000 0050         sprintf(txt, "%d", r);
000114 ebe3      	LDI  R30,LOW(_txt)
000115 e0f1      	LDI  R31,HIGH(_txt)
000116 93fa      	ST   -Y,R31
000117 93ea      	ST   -Y,R30
                +
000118 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000119 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
00011a 93fa      	ST   -Y,R31
00011b 93ea      	ST   -Y,R30
00011c 01f5      	MOVW R30,R10
00011d 940e 05b1 	CALL __CWD1
00011f 940e 05cb 	CALL __PUTPARD1
000121 e084      	LDI  R24,4
000122 940e 04c2 	CALL _sprintf
000124 9628      	ADIW R28,8
                 ; 0000 0051         lcd_puts(txt);
000125 eba3      	LDI  R26,LOW(_txt)
000126 e0b1      	LDI  R27,HIGH(_txt)
000127 940e 02fa 	CALL _lcd_puts
                 ; 0000 0052         delay_ms(200);
000129 eca8      	LDI  R26,LOW(200)
00012a e0b0      	LDI  R27,0
00012b 940e 059a 	CALL _delay_ms
                 ; 0000 0053         lcd_clear();
00012d 940e 02be 	CALL _lcd_clear
                 ; 0000 0054     }
00012f 01f5      	MOVW R30,R10
000130 9731      	SBIW R30,1
000131 015f      	MOVW R10,R30
000132 cfdd      	RJMP _0x29
                 _0x2A:
                 ; 0000 0055 }
000133 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1B:
000160           	.BYTE 0x16
                 ;
                 ;void showBoard()
                 ; 0000 0058 {
                 
                 	.CSEG
                 _showBoard:
                 ; .FSTART _showBoard
                 ; 0000 0059 
                 ; 0000 005A     lcd_clear();
000134 940e 02be 	CALL _lcd_clear
                 ; 0000 005B     for (r = 0; r < 3; r++)
000136 24aa      	CLR  R10
000137 24bb      	CLR  R11
                 _0x2C:
000138 940e 051c 	CALL SUBOPT_0x0
00013a f574      	BRGE _0x2D
                 ; 0000 005C     {
                 ; 0000 005D         for (c = 0; c < 3; c++)
00013b 24cc      	CLR  R12
00013c 24dd      	CLR  R13
                 _0x2F:
00013d 940e 0521 	CALL SUBOPT_0x1
00013f f52c      	BRGE _0x30
                 ; 0000 005E         {
                 ; 0000 005F             lcd_gotoxy(c, r);
000140 92ca      	ST   -Y,R12
000141 2daa      	MOV  R26,R10
000142 940e 02aa 	CALL _lcd_gotoxy
                 ; 0000 0060             if (game_board[r][c] == 1)
000144 940e 0526 	CALL SUBOPT_0x2
000146 940e 05c3 	CALL __GETW1P
000148 30e1      	CPI  R30,LOW(0x1)
000149 e0a0      	LDI  R26,HIGH(0x1)
00014a 07fa      	CPC  R31,R26
00014b f411      	BRNE _0x31
                 ; 0000 0061             {
                 ; 0000 0062                 lcd_putchar('X');
00014c e5a8      	LDI  R26,LOW(88)
00014d c011      	RJMP _0x5F
                 ; 0000 0063             }
                 ; 0000 0064             else if (game_board[r][c] == -1)
                 _0x31:
00014e 940e 0526 	CALL SUBOPT_0x2
000150 940e 05c3 	CALL __GETW1P
000152 3fef      	CPI  R30,LOW(0xFFFF)
000153 efaf      	LDI  R26,HIGH(0xFFFF)
000154 07fa      	CPC  R31,R26
000155 f411      	BRNE _0x33
                 ; 0000 0065             {
                 ; 0000 0066                 lcd_putchar('O');
000156 e4af      	LDI  R26,LOW(79)
000157 c007      	RJMP _0x5F
                 ; 0000 0067             }
                 ; 0000 0068             else if (game_board[r][c] == 0)
                 _0x33:
000158 940e 0526 	CALL SUBOPT_0x2
00015a 940e 05c3 	CALL __GETW1P
00015c 9730      	SBIW R30,0
00015d f419      	BRNE _0x35
                 ; 0000 0069             {
                 ; 0000 006A                 lcd_putchar('-');
00015e e2ad      	LDI  R26,LOW(45)
                 _0x5F:
00015f 940e 02d3 	CALL _lcd_putchar
                 ; 0000 006B             }
                 ; 0000 006C         }
                 _0x35:
000161 01f6      	MOVW R30,R12
000162 9631      	ADIW R30,1
000163 016f      	MOVW R12,R30
000164 cfd8      	RJMP _0x2F
                 _0x30:
                 ; 0000 006D     }
000165 01f5      	MOVW R30,R10
000166 9631      	ADIW R30,1
000167 015f      	MOVW R10,R30
000168 cfcf      	RJMP _0x2C
                 _0x2D:
                 ; 0000 006E }
000169 9508      	RET
                 ; .FEND
                 ;
                 ;void check_win()
                 ; 0000 0071 {
                 _check_win:
                 ; .FSTART _check_win
                 ; 0000 0072     for (r = 0; r < 8; r++)
00016a 24aa      	CLR  R10
00016b 24bb      	CLR  R11
                 _0x37:
00016c 940e 0539 	CALL SUBOPT_0x4
00016e f434      	BRGE _0x38
                 ; 0000 0073     {
                 ; 0000 0074         win[r] = 0;
00016f 940e 053e 	CALL SUBOPT_0x5
                 ; 0000 0075     }
000171 01f5      	MOVW R30,R10
000172 9631      	ADIW R30,1
000173 015f      	MOVW R10,R30
000174 cff7      	RJMP _0x37
                 _0x38:
                 ; 0000 0076     for (r = 0; r < 3; r++)
000175 24aa      	CLR  R10
000176 24bb      	CLR  R11
                 _0x3A:
000177 940e 051c 	CALL SUBOPT_0x0
000179 f00c      	BRLT PC+2
00017a c053      	RJMP _0x3B
                 ; 0000 0077         for (c = 0; c < 3; c++)
00017b 24cc      	CLR  R12
00017c 24dd      	CLR  R13
                 _0x3D:
00017d 940e 0521 	CALL SUBOPT_0x1
00017f f00c      	BRLT PC+2
000180 c049      	RJMP _0x3E
                 ; 0000 0078         {
                 ; 0000 0079             win[r] += game_board[r][c];
000181 940e 0557 	CALL SUBOPT_0x8
000183 0fea      	ADD  R30,R26
000184 1ffb      	ADC  R31,R27
000185 01cf      	MOVW R24,R30
000186 8160      	LD   R22,Z
000187 8171      	LDD  R23,Z+1
000188 940e 0526 	CALL SUBOPT_0x2
00018a 940e 055d 	CALL SUBOPT_0x9
                 ; 0000 007A             win[r + 3] += game_board[c][r];
00018c 01f5      	MOVW R30,R10
00018d 9633      	ADIW R30,3
00018e e9ad      	LDI  R26,LOW(_win)
00018f e0b1      	LDI  R27,HIGH(_win)
000190 0fee      	LSL  R30
000191 1fff      	ROL  R31
000192 0fea      	ADD  R30,R26
000193 1ffb      	ADC  R31,R27
000194 01cf      	MOVW R24,R30
000195 8160      	LD   R22,Z
000196 8171      	LDD  R23,Z+1
000197 01f6      	MOVW R30,R12
000198 e0a6      	LDI  R26,LOW(6)
000199 e0b0      	LDI  R27,HIGH(6)
00019a 940e 05bb 	CALL __MULW12U
00019c 57e5      	SUBI R30,LOW(-_game_board)
00019d 4ffe      	SBCI R31,HIGH(-_game_board)
00019e 01df      	MOVW R26,R30
00019f 01f5      	MOVW R30,R10
0001a0 0fee      	LSL  R30
0001a1 1fff      	ROL  R31
0001a2 0fae      	ADD  R26,R30
0001a3 1fbf      	ADC  R27,R31
0001a4 940e 055d 	CALL SUBOPT_0x9
                 ; 0000 007B             if (c == r)
                +
0001a6 14ac     +CP R10 , R12
0001a7 04bd     +CPC R11 , R13
                 	__CPWRR 10,11,12,13
0001a8 f441      	BRNE _0x3F
                 ; 0000 007C             {
                 ; 0000 007D                 win[6] = game_board[r][c];
0001a9 940e 0526 	CALL SUBOPT_0x2
0001ab 940e 05c3 	CALL __GETW1P
                +
0001ad 93e0 01a9+STS _win + ( 12 ) , R30
0001af 93f0 01aa+STS _win + ( 12 ) + 1 , R31
                 	__PUTW1MN _win,12
                 ; 0000 007E             }
                 ; 0000 007F             if (r + c == 2)
                 _0x3F:
0001b1 01f6      	MOVW R30,R12
0001b2 0dea      	ADD  R30,R10
0001b3 1dfb      	ADC  R31,R11
0001b4 30e2      	CPI  R30,LOW(0x2)
0001b5 e0a0      	LDI  R26,HIGH(0x2)
0001b6 07fa      	CPC  R31,R26
0001b7 f471      	BRNE _0x40
                 ; 0000 0080             {
                 ; 0000 0081                 win[7] += game_board[r][c];
0001b8 940e 0526 	CALL SUBOPT_0x2
0001ba 940e 05c3 	CALL __GETW1P
                +
0001bc 91a0 01ab+LDS R26 , _win + ( 14 )
0001be 91b0 01ac+LDS R27 , _win + ( 14 ) + 1
                 	__GETW2MN _win,14
0001c0 0fea      	ADD  R30,R26
0001c1 1ffb      	ADC  R31,R27
                +
0001c2 93e0 01ab+STS _win + ( 14 ) , R30
0001c4 93f0 01ac+STS _win + ( 14 ) + 1 , R31
                 	__PUTW1MN _win,14
                 ; 0000 0082             }
                 ; 0000 0083         }
                 _0x40:
0001c6 01f6      	MOVW R30,R12
0001c7 9631      	ADIW R30,1
0001c8 016f      	MOVW R12,R30
0001c9 cfb3      	RJMP _0x3D
                 _0x3E:
0001ca 01f5      	MOVW R30,R10
0001cb 9631      	ADIW R30,1
0001cc 015f      	MOVW R10,R30
0001cd cfa9      	RJMP _0x3A
                 _0x3B:
                 ; 0000 0084 }
0001ce 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0087 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0088     PORTC = 0xff; // initial value of portc
0001cf efef      	LDI  R30,LOW(255)
0001d0 bbe5      	OUT  0x15,R30
                 ; 0000 0089     DDRC = 0x0f;  // rows are input and columns are output
0001d1 e0ef      	LDI  R30,LOW(15)
0001d2 bbe4      	OUT  0x14,R30
                 ; 0000 008A     lcd_init(20); // set number of lcd columns
0001d3 e1a4      	LDI  R26,LOW(20)
0001d4 940e 031c 	CALL _lcd_init
                 ; 0000 008B     init();
0001d6 def5      	RCALL _init
                 ; 0000 008C     showBoard();
0001d7 df5c      	RCALL _showBoard
                 ; 0000 008D 
                 ; 0000 008E     while (state == 0)
                 _0x41:
0001d8 2c08      	MOV  R0,R8
0001d9 2809      	OR   R0,R9
0001da f009      	BREQ PC+2
0001db c067      	RJMP _0x43
                 ; 0000 008F     {
                 ; 0000 0090         keypad();
0001dc deb3      	RCALL _keypad
                 ; 0000 0091         if (r != 3 && c != 3)
0001dd e0e3      	LDI  R30,LOW(3)
0001de e0f0      	LDI  R31,HIGH(3)
0001df 15ea      	CP   R30,R10
0001e0 05fb      	CPC  R31,R11
0001e1 f019      	BREQ _0x45
0001e2 15ec      	CP   R30,R12
0001e3 05fd      	CPC  R31,R13
0001e4 f409      	BRNE _0x46
                 _0x45:
0001e5 c01c      	RJMP _0x44
                 _0x46:
                 ; 0000 0092         {
                 ; 0000 0093             if (game_board[r][c] == 0)
0001e6 940e 0526 	CALL SUBOPT_0x2
0001e8 940e 05c3 	CALL __GETW1P
0001ea 9730      	SBIW R30,0
0001eb f4b1      	BRNE _0x47
                 ; 0000 0094             {
                 ; 0000 0095                 if (player == 0)
0001ec 2c04      	MOV  R0,R4
0001ed 2805      	OR   R0,R5
0001ee f429      	BRNE _0x48
                 ; 0000 0096                 {
                 ; 0000 0097                     game_board[r][c] = 1;
0001ef 940e 0526 	CALL SUBOPT_0x2
0001f1 e0e1      	LDI  R30,LOW(1)
0001f2 e0f0      	LDI  R31,HIGH(1)
0001f3 c004      	RJMP _0x60
                 ; 0000 0098                 }
                 ; 0000 0099                 else
                 _0x48:
                 ; 0000 009A                 {
                 ; 0000 009B                     game_board[r][c] = -1;
0001f4 940e 0526 	CALL SUBOPT_0x2
0001f6 efef      	LDI  R30,LOW(65535)
0001f7 efff      	LDI  R31,HIGH(65535)
                 _0x60:
0001f8 93ed      	ST   X+,R30
0001f9 93fc      	ST   X,R31
                 ; 0000 009C                 }
                 ; 0000 009D                 player = !player;
0001fa 01f2      	MOVW R30,R4
0001fb 940e 05b6 	CALL __LNEGW1
0001fd 2e4e      	MOV  R4,R30
0001fe 2455      	CLR  R5
                 ; 0000 009E                 count++;
0001ff 01f3      	MOVW R30,R6
000200 9631      	ADIW R30,1
000201 013f      	MOVW R6,R30
                 ; 0000 009F             }
                 ; 0000 00A0         }
                 _0x47:
                 ; 0000 00A1         k = r * 4 + c;
                 _0x44:
000202 01f5      	MOVW R30,R10
000203 940e 05ac 	CALL __LSLW2
000205 0dec      	ADD  R30,R12
000206 1dfd      	ADC  R31,R13
000207 93e0 01ad 	STS  _k,R30
000209 93f0 01ae 	STS  _k+1,R31
                 ; 0000 00A2         if (k == 13)
00020b 940e 0552 	CALL SUBOPT_0x7
00020d 971d      	SBIW R26,13
00020e f409      	BRNE _0x4A
                 ; 0000 00A3         {
                 ; 0000 00A4             init();
00020f debc      	RCALL _init
                 ; 0000 00A5         }
                 ; 0000 00A6         showBoard();
                 _0x4A:
000210 df23      	RCALL _showBoard
                 ; 0000 00A7         check_win();
000211 df58      	RCALL _check_win
                 ; 0000 00A8         for (r = 0; r < 8; r++)
000212 24aa      	CLR  R10
000213 24bb      	CLR  R11
                 _0x4C:
000214 940e 0539 	CALL SUBOPT_0x4
000216 f4f4      	BRGE _0x4D
                 ; 0000 00A9         {
                 ; 0000 00AA             if (win[r] == 3)
000217 940e 0557 	CALL SUBOPT_0x8
000219 0fae      	ADD  R26,R30
00021a 1fbf      	ADC  R27,R31
00021b 940e 05c3 	CALL __GETW1P
00021d 30e3      	CPI  R30,LOW(0x3)
00021e e0a0      	LDI  R26,HIGH(0x3)
00021f 07fa      	CPC  R31,R26
000220 f419      	BRNE _0x4E
                 ; 0000 00AB             {
                 ; 0000 00AC                 state = 1;
000221 e0e1      	LDI  R30,LOW(1)
000222 e0f0      	LDI  R31,HIGH(1)
000223 c00c      	RJMP _0x61
                 ; 0000 00AD             }
                 ; 0000 00AE             else if (win[r] == -3)
                 _0x4E:
000224 940e 0557 	CALL SUBOPT_0x8
000226 0fae      	ADD  R26,R30
000227 1fbf      	ADC  R27,R31
000228 940e 05c3 	CALL __GETW1P
00022a 3fed      	CPI  R30,LOW(0xFFFD)
00022b efaf      	LDI  R26,HIGH(0xFFFD)
00022c 07fa      	CPC  R31,R26
00022d f419      	BRNE _0x50
                 ; 0000 00AF             {
                 ; 0000 00B0                 state = -1;
00022e efef      	LDI  R30,LOW(65535)
00022f efff      	LDI  R31,HIGH(65535)
                 _0x61:
000230 014f      	MOVW R8,R30
                 ; 0000 00B1             }
                 ; 0000 00B2         }
                 _0x50:
000231 01f5      	MOVW R30,R10
000232 9631      	ADIW R30,1
000233 015f      	MOVW R10,R30
000234 cfdf      	RJMP _0x4C
                 _0x4D:
                 ; 0000 00B3         if (count == 9 && state == 0)
000235 e0e9      	LDI  R30,LOW(9)
000236 e0f0      	LDI  R31,HIGH(9)
000237 15e6      	CP   R30,R6
000238 05f7      	CPC  R31,R7
000239 f421      	BRNE _0x52
00023a 2400      	CLR  R0
00023b 1408      	CP   R0,R8
00023c 0409      	CPC  R0,R9
00023d f009      	BREQ _0x53
                 _0x52:
00023e c003      	RJMP _0x51
                 _0x53:
                 ; 0000 00B4             state = 2;
00023f e0e2      	LDI  R30,LOW(2)
000240 e0f0      	LDI  R31,HIGH(2)
000241 014f      	MOVW R8,R30
                 ; 0000 00B5     }
                 _0x51:
000242 cf95      	RJMP _0x41
                 _0x43:
                 ; 0000 00B6     lcd_gotoxy(9, 2);
000243 e0e9      	LDI  R30,LOW(9)
000244 93ea      	ST   -Y,R30
000245 e0a2      	LDI  R26,LOW(2)
000246 940e 02aa 	CALL _lcd_gotoxy
                 ; 0000 00B7     if (state == 1)
000248 e0e1      	LDI  R30,LOW(1)
000249 e0f0      	LDI  R31,HIGH(1)
00024a 15e8      	CP   R30,R8
00024b 05f9      	CPC  R31,R9
00024c f419      	BRNE _0x54
                 ; 0000 00B8     {
                 ; 0000 00B9         lcd_puts("X wins!");
                +
00024d e7a6     +LDI R26 , LOW ( _0x55 + ( 0 ) )
00024e e0b1     +LDI R27 , HIGH ( _0x55 + ( 0 ) )
                 	__POINTW2MN _0x55,0
00024f c00f      	RJMP _0x62
                 ; 0000 00BA     }
                 ; 0000 00BB     else if (state == -1)
                 _0x54:
000250 efef      	LDI  R30,LOW(65535)
000251 efff      	LDI  R31,HIGH(65535)
000252 15e8      	CP   R30,R8
000253 05f9      	CPC  R31,R9
000254 f419      	BRNE _0x57
                 ; 0000 00BC     {
                 ; 0000 00BD         lcd_puts("O wins!");
                +
000255 e7ae     +LDI R26 , LOW ( _0x55 + ( 8 ) )
000256 e0b1     +LDI R27 , HIGH ( _0x55 + ( 8 ) )
                 	__POINTW2MN _0x55,8
000257 c007      	RJMP _0x62
                 ; 0000 00BE     }
                 ; 0000 00BF     else if (state == 2)
                 _0x57:
000258 e0e2      	LDI  R30,LOW(2)
000259 e0f0      	LDI  R31,HIGH(2)
00025a 15e8      	CP   R30,R8
00025b 05f9      	CPC  R31,R9
00025c f421      	BRNE _0x59
                 ; 0000 00C0     {
                 ; 0000 00C1         lcd_puts("Draw");
                +
00025d e8a6     +LDI R26 , LOW ( _0x55 + ( 16 ) )
00025e e0b1     +LDI R27 , HIGH ( _0x55 + ( 16 ) )
                 	__POINTW2MN _0x55,16
                 _0x62:
00025f 940e 02fa 	CALL _lcd_puts
                 ; 0000 00C2     }
                 ; 0000 00C3     while(1){
                 _0x59:
                 _0x5A:
                 ; 0000 00C4         keypad();
000261 940e 0546 	CALL SUBOPT_0x6
                 ; 0000 00C5         k = r*4+c;
                 ; 0000 00C6         if(k == 13){
000263 940e 0552 	CALL SUBOPT_0x7
000265 971d      	SBIW R26,13
000266 f409      	BRNE _0x5D
                 ; 0000 00C7             init();
000267 de64      	RCALL _init
                 ; 0000 00C8         }
                 ; 0000 00C9     }
                 _0x5D:
000268 cff8      	RJMP _0x5A
                 ; 0000 00CA }
                 _0x5E:
000269 cfff      	RJMP _0x5E
                 ; .FEND
                 
                 	.DSEG
                 _0x55:
000176           	.BYTE 0x15
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
00026a e0ff          ldi   r31,15
                 __lcd_delay0:
00026b 95fa          dec   r31
00026c f7f1          brne  __lcd_delay0
00026d 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
00026e b3a1          in    r26,__lcd_direction
00026f 70af          andi  r26,0xf                 ;set as input
000270 bba1          out   __lcd_direction,r26
000271 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000272 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000273 dff6      	RCALL __lcd_delay_G100
000274 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000275 dff4      	RCALL __lcd_delay_G100
000276 b3a0          in    r26,__lcd_pin
000277 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000278 dff1      	RCALL __lcd_delay_G100
000279 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00027a dfef      	RCALL __lcd_delay_G100
00027b 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00027c fda7          sbrc  r26,__lcd_busy_flag
00027d cff5          rjmp  __lcd_busy
00027e 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00027f 7fa0          andi  r26,0xf0
000280 2bab          or    r26,r27
000281 bba2          out   __lcd_port,r26          ;write
000282 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000283 940e 026a 	CALL __lcd_delay_G100
000285 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000286 940e 026a 	CALL __lcd_delay_G100
000288 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000289 93aa      	ST   -Y,R26
00028a 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00028b b3a1          in    r26,__lcd_direction
00028c 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00028d bba1          out   __lcd_direction,r26
00028e b3b2          in    r27,__lcd_port
00028f 70bf          andi  r27,0xf
000290 81a8          ld    r26,y
000291 dfed      	RCALL __lcd_write_nibble_G100
000292 81a8          ld    r26,y
000293 95a2          swap  r26
000294 dfea      	RCALL __lcd_write_nibble_G100
000295 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000296 940c 034e 	JMP  _0x2080002
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000298 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000299 940e 026a 	CALL __lcd_delay_G100
00029b b3e0          in    r30,__lcd_pin           ;read
00029c 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00029d 940e 026a 	CALL __lcd_delay_G100
00029f 7fe0          andi  r30,0xf0
0002a0 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0002a1 940e 026a 	CALL __lcd_delay_G100
0002a3 dff4      	RCALL __lcd_read_nibble_G100
0002a4 2fae          mov   r26,r30
0002a5 dff2      	RCALL __lcd_read_nibble_G100
0002a6 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
0002a7 95e2          swap  r30
0002a8 2bea          or    r30,r26
0002a9 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002aa 93aa      	ST   -Y,R26
0002ab 940e 026e 	CALL __lcd_ready
0002ad 81e8      	LD   R30,Y
0002ae e0f0      	LDI  R31,0
0002af 54eb      	SUBI R30,LOW(-__base_y_G100)
0002b0 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002b1 81e0      	LD   R30,Z
0002b2 81a9      	LDD  R26,Y+1
0002b3 0fae      	ADD  R26,R30
0002b4 940e 0289 	CALL __lcd_write_data
0002b6 81e9      	LDD  R30,Y+1
0002b7 93e0 01b9 	STS  __lcd_x,R30
0002b9 81e8      	LD   R30,Y
0002ba 93e0 01ba 	STS  __lcd_y,R30
0002bc 9622      	ADIW R28,2
0002bd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002be 940e 026e 	CALL __lcd_ready
0002c0 e0a2      	LDI  R26,LOW(2)
0002c1 940e 0289 	CALL __lcd_write_data
0002c3 940e 026e 	CALL __lcd_ready
0002c5 e0ac      	LDI  R26,LOW(12)
0002c6 940e 0289 	CALL __lcd_write_data
0002c8 940e 026e 	CALL __lcd_ready
0002ca e0a1      	LDI  R26,LOW(1)
0002cb 940e 0289 	CALL __lcd_write_data
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 93e0 01ba 	STS  __lcd_y,R30
0002d0 93e0 01b9 	STS  __lcd_x,R30
0002d2 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002d3 93aa      	ST   -Y,R26
0002d4 93ef          push r30
0002d5 93ff          push r31
0002d6 81a8          ld   r26,y
0002d7 9468          set
0002d8 30aa          cpi  r26,10
0002d9 f039          breq __lcd_putchar1
0002da 94e8          clt
0002db 91e0 01bb 	LDS  R30,__lcd_maxx
0002dd 91a0 01b9 	LDS  R26,__lcd_x
0002df 17ae      	CP   R26,R30
0002e0 f058      	BRLO _0x2000004
                 	__lcd_putchar1:
0002e1 91e0 01ba 	LDS  R30,__lcd_y
0002e3 5fef      	SUBI R30,-LOW(1)
0002e4 93e0 01ba 	STS  __lcd_y,R30
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 93ea      	ST   -Y,R30
0002e8 91a0 01ba 	LDS  R26,__lcd_y
0002ea dfbf      	RCALL _lcd_gotoxy
0002eb f056      	brts __lcd_putchar0
                 _0x2000004:
0002ec 91e0 01b9 	LDS  R30,__lcd_x
0002ee 5fef      	SUBI R30,-LOW(1)
0002ef 93e0 01b9 	STS  __lcd_x,R30
0002f1 df7c          rcall __lcd_ready
0002f2 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
0002f3 81a8      	LD   R26,Y
0002f4 940e 0289 	CALL __lcd_write_data
                 __lcd_putchar0:
0002f6 91ff          pop  r31
0002f7 91ef          pop  r30
0002f8 940c 034e 	JMP  _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002fa 93ba      	ST   -Y,R27
0002fb 93aa      	ST   -Y,R26
0002fc 931a      	ST   -Y,R17
                 _0x2000005:
0002fd 81a9      	LDD  R26,Y+1
0002fe 81ba      	LDD  R27,Y+1+1
0002ff 91ed      	LD   R30,X+
000300 83a9      	STD  Y+1,R26
000301 83ba      	STD  Y+1+1,R27
000302 2f1e      	MOV  R17,R30
000303 30e0      	CPI  R30,0
000304 f019      	BREQ _0x2000007
000305 2fa1      	MOV  R26,R17
000306 dfcc      	RCALL _lcd_putchar
000307 cff5      	RJMP _0x2000005
                 _0x2000007:
000308 8118      	LDD  R17,Y+0
000309 9623      	ADIW R28,3
00030a 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00030b 27aa          clr   r26
00030c 27bb          clr   r27
                 __long_delay0:
00030d 9711          sbiw  r26,1         ;2 cycles
00030e f7f1          brne  __long_delay0 ;2 cycles
00030f 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000310 93aa      	ST   -Y,R26
000311 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000312 b3a1          in    r26,__lcd_direction
000313 6fa7          ori   r26,0xf7                ;set as output
000314 bba1          out   __lcd_direction,r26
000315 b3b2          in    r27,__lcd_port
000316 70bf          andi  r27,0xf
000317 81a8          ld    r26,y
000318 940e 027f 	CALL __lcd_write_nibble_G100
00031a 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00031b c032      	RJMP _0x2080002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00031c 93aa      	ST   -Y,R26
00031d 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00031e 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
00031f 81e8      	LD   R30,Y
000320 93e0 01bb 	STS  __lcd_maxx,R30
000322 58e0      	SUBI R30,-LOW(128)
                +
000323 93e0 01b7+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000325 81e8      	LD   R30,Y
000326 54e0      	SUBI R30,-LOW(192)
                +
000327 93e0 01b8+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000329 940e 0565 	CALL SUBOPT_0xA
00032b 940e 0565 	CALL SUBOPT_0xA
00032d 940e 0565 	CALL SUBOPT_0xA
00032f dfdb      	RCALL __long_delay_G100
000330 e2a0      	LDI  R26,LOW(32)
000331 dfde      	RCALL __lcd_init_write_G100
000332 dfd8      	RCALL __long_delay_G100
000333 e2a8      	LDI  R26,LOW(40)
000334 940e 056a 	CALL SUBOPT_0xB
000336 e0a4      	LDI  R26,LOW(4)
000337 940e 056a 	CALL SUBOPT_0xB
000339 e8a5      	LDI  R26,LOW(133)
00033a 940e 056a 	CALL SUBOPT_0xB
00033c b3a1          in    r26,__lcd_direction
00033d 70af          andi  r26,0xf                 ;set as input
00033e bba1          out   __lcd_direction,r26
00033f 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000340 940e 02a1 	CALL _lcd_read_byte0_G100
000342 30e5      	CPI  R30,LOW(0x5)
000343 f011      	BREQ _0x200000B
000344 e0e0      	LDI  R30,LOW(0)
000345 c008      	RJMP _0x2080002
                 _0x200000B:
000346 940e 026e 	CALL __lcd_ready
000348 e0a6      	LDI  R26,LOW(6)
000349 940e 0289 	CALL __lcd_write_data
00034b 940e 02be 	CALL _lcd_clear
00034d e0e1      	LDI  R30,LOW(1)
                 _0x2080002:
00034e 9621      	ADIW R28,1
00034f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000350 93ba      	ST   -Y,R27
000351 93aa      	ST   -Y,R26
000352 931a      	ST   -Y,R17
000353 930a      	ST   -Y,R16
000354 81aa      	LDD  R26,Y+2
000355 81bb      	LDD  R27,Y+2+1
000356 9612      	ADIW R26,2
000357 940e 05c3 	CALL __GETW1P
000359 9730      	SBIW R30,0
00035a f159      	BREQ _0x2020010
00035b 81aa      	LDD  R26,Y+2
00035c 81bb      	LDD  R27,Y+2+1
00035d 9614      	ADIW R26,4
00035e 940e 05c3 	CALL __GETW1P
000360 018f      	MOVW R16,R30
000361 9730      	SBIW R30,0
000362 f061      	BREQ _0x2020012
                +
000363 3002     +CPI R16 , LOW ( 2 )
000364 e0e0     +LDI R30 , HIGH ( 2 )
000365 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000366 f098      	BRLO _0x2020013
000367 01f8      	MOVW R30,R16
000368 9731      	SBIW R30,1
000369 018f      	MOVW R16,R30
                +
00036a 81aa     +LDD R26 , Y + 2
00036b 81bb     +LDD R27 , Y + 2 + 1
00036c 9614     +ADIW R26 , 4
00036d 93ed     +ST X + , R30
00036e 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00036f 81aa      	LDD  R26,Y+2
000370 81bb      	LDD  R27,Y+2+1
000371 9612      	ADIW R26,2
000372 91ed      	LD   R30,X+
000373 91fd      	LD   R31,X+
000374 9631      	ADIW R30,1
000375 93fe      	ST   -X,R31
000376 93ee      	ST   -X,R30
000377 9731      	SBIW R30,1
000378 81ac      	LDD  R26,Y+4
000379 83a0      	STD  Z+0,R26
                 _0x2020013:
00037a 81aa      	LDD  R26,Y+2
00037b 81bb      	LDD  R27,Y+2+1
00037c 940e 05c3 	CALL __GETW1P
00037e 23ff      	TST  R31
00037f f02a      	BRMI _0x2020014
000380 91ed      	LD   R30,X+
000381 91fd      	LD   R31,X+
000382 9631      	ADIW R30,1
000383 93fe      	ST   -X,R31
000384 93ee      	ST   -X,R30
                 _0x2020014:
000385 c006      	RJMP _0x2020015
                 _0x2020010:
000386 81aa      	LDD  R26,Y+2
000387 81bb      	LDD  R27,Y+2+1
000388 efef      	LDI  R30,LOW(65535)
000389 efff      	LDI  R31,HIGH(65535)
00038a 93ed      	ST   X+,R30
00038b 93fc      	ST   X,R31
                 _0x2020015:
00038c 8119      	LDD  R17,Y+1
00038d 8108      	LDD  R16,Y+0
00038e 9625      	ADIW R28,5
00038f 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000390 93ba      	ST   -Y,R27
000391 93aa      	ST   -Y,R26
000392 9726      	SBIW R28,6
000393 940e 05d0 	CALL __SAVELOCR6
000395 e010      	LDI  R17,0
000396 85ac      	LDD  R26,Y+12
000397 85bd      	LDD  R27,Y+12+1
000398 940e 0534 	CALL SUBOPT_0x3
                 _0x2020016:
00039a 89ea      	LDD  R30,Y+18
00039b 89fb      	LDD  R31,Y+18+1
00039c 9631      	ADIW R30,1
00039d 8bea      	STD  Y+18,R30
00039e 8bfb      	STD  Y+18+1,R31
00039f 9731      	SBIW R30,1
0003a0 91e4      	LPM  R30,Z
0003a1 2f2e      	MOV  R18,R30
0003a2 30e0      	CPI  R30,0
0003a3 f409      	BRNE PC+2
0003a4 c115      	RJMP _0x2020018
0003a5 2fe1      	MOV  R30,R17
0003a6 30e0      	CPI  R30,0
0003a7 f439      	BRNE _0x202001C
0003a8 3225      	CPI  R18,37
0003a9 f411      	BRNE _0x202001D
0003aa e011      	LDI  R17,LOW(1)
0003ab c002      	RJMP _0x202001E
                 _0x202001D:
0003ac 940e 056e 	CALL SUBOPT_0xC
                 _0x202001E:
0003ae c10a      	RJMP _0x202001B
                 _0x202001C:
0003af 30e1      	CPI  R30,LOW(0x1)
0003b0 f4a9      	BRNE _0x202001F
0003b1 3225      	CPI  R18,37
0003b2 f419      	BRNE _0x2020020
0003b3 940e 056e 	CALL SUBOPT_0xC
0003b5 c102      	RJMP _0x20200CC
                 _0x2020020:
0003b6 e012      	LDI  R17,LOW(2)
0003b7 e040      	LDI  R20,LOW(0)
0003b8 e000      	LDI  R16,LOW(0)
0003b9 322d      	CPI  R18,45
0003ba f411      	BRNE _0x2020021
0003bb e001      	LDI  R16,LOW(1)
0003bc c0fc      	RJMP _0x202001B
                 _0x2020021:
0003bd 322b      	CPI  R18,43
0003be f411      	BRNE _0x2020022
0003bf e24b      	LDI  R20,LOW(43)
0003c0 c0f8      	RJMP _0x202001B
                 _0x2020022:
0003c1 3220      	CPI  R18,32
0003c2 f411      	BRNE _0x2020023
0003c3 e240      	LDI  R20,LOW(32)
0003c4 c0f4      	RJMP _0x202001B
                 _0x2020023:
0003c5 c002      	RJMP _0x2020024
                 _0x202001F:
0003c6 30e2      	CPI  R30,LOW(0x2)
0003c7 f439      	BRNE _0x2020025
                 _0x2020024:
0003c8 e050      	LDI  R21,LOW(0)
0003c9 e013      	LDI  R17,LOW(3)
0003ca 3320      	CPI  R18,48
0003cb f411      	BRNE _0x2020026
0003cc 6800      	ORI  R16,LOW(128)
0003cd c0eb      	RJMP _0x202001B
                 _0x2020026:
0003ce c003      	RJMP _0x2020027
                 _0x2020025:
0003cf 30e3      	CPI  R30,LOW(0x3)
0003d0 f009      	BREQ PC+2
0003d1 c0e7      	RJMP _0x202001B
                 _0x2020027:
0003d2 3320      	CPI  R18,48
0003d3 f010      	BRLO _0x202002A
0003d4 332a      	CPI  R18,58
0003d5 f008      	BRLO _0x202002B
                 _0x202002A:
0003d6 c007      	RJMP _0x2020029
                 _0x202002B:
0003d7 e0aa      	LDI  R26,LOW(10)
0003d8 9f5a      	MUL  R21,R26
0003d9 2d50      	MOV  R21,R0
0003da 2fe2      	MOV  R30,R18
0003db 53e0      	SUBI R30,LOW(48)
0003dc 0f5e      	ADD  R21,R30
0003dd c0db      	RJMP _0x202001B
                 _0x2020029:
0003de 2fe2      	MOV  R30,R18
0003df 36e3      	CPI  R30,LOW(0x63)
0003e0 f449      	BRNE _0x202002F
0003e1 940e 0575 	CALL SUBOPT_0xD
0003e3 89e8      	LDD  R30,Y+16
0003e4 89f9      	LDD  R31,Y+16+1
0003e5 81a4      	LDD  R26,Z+4
0003e6 93aa      	ST   -Y,R26
0003e7 940e 057b 	CALL SUBOPT_0xE
0003e9 c0ce      	RJMP _0x2020030
                 _0x202002F:
0003ea 37e3      	CPI  R30,LOW(0x73)
0003eb f441      	BRNE _0x2020032
0003ec 940e 0575 	CALL SUBOPT_0xD
0003ee 940e 0581 	CALL SUBOPT_0xF
0003f0 940e 0503 	CALL _strlen
0003f2 2f1e      	MOV  R17,R30
0003f3 c00a      	RJMP _0x2020033
                 _0x2020032:
0003f4 37e0      	CPI  R30,LOW(0x70)
0003f5 f461      	BRNE _0x2020035
0003f6 940e 0575 	CALL SUBOPT_0xD
0003f8 940e 0581 	CALL SUBOPT_0xF
0003fa 940e 050f 	CALL _strlenf
0003fc 2f1e      	MOV  R17,R30
0003fd 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003fe 6002      	ORI  R16,LOW(2)
0003ff 770f      	ANDI R16,LOW(127)
000400 e030      	LDI  R19,LOW(0)
000401 c034      	RJMP _0x2020036
                 _0x2020035:
000402 36e4      	CPI  R30,LOW(0x64)
000403 f011      	BREQ _0x2020039
000404 36e9      	CPI  R30,LOW(0x69)
000405 f411      	BRNE _0x202003A
                 _0x2020039:
000406 6004      	ORI  R16,LOW(4)
000407 c002      	RJMP _0x202003B
                 _0x202003A:
000408 37e5      	CPI  R30,LOW(0x75)
000409 f431      	BRNE _0x202003C
                 _0x202003B:
00040a e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00040b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00040c 83ee      	STD  Y+6,R30
00040d 83ff      	STD  Y+6+1,R31
00040e e015      	LDI  R17,LOW(5)
00040f c00c      	RJMP _0x202003D
                 _0x202003C:
000410 35e8      	CPI  R30,LOW(0x58)
000411 f411      	BRNE _0x202003F
000412 6008      	ORI  R16,LOW(8)
000413 c003      	RJMP _0x2020040
                 _0x202003F:
000414 37e8      	CPI  R30,LOW(0x78)
000415 f009      	BREQ PC+2
000416 c0a1      	RJMP _0x2020071
                 _0x2020040:
000417 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000418 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000419 83ee      	STD  Y+6,R30
00041a 83ff      	STD  Y+6+1,R31
00041b e014      	LDI  R17,LOW(4)
                 _0x202003D:
00041c ff02      	SBRS R16,2
00041d c014      	RJMP _0x2020042
00041e 940e 0575 	CALL SUBOPT_0xD
000420 940e 058b 	CALL SUBOPT_0x10
000422 85ab      	LDD  R26,Y+11
000423 23aa      	TST  R26
000424 f43a      	BRPL _0x2020043
000425 85ea      	LDD  R30,Y+10
000426 85fb      	LDD  R31,Y+10+1
000427 940e 05a8 	CALL __ANEGW1
000429 87ea      	STD  Y+10,R30
00042a 87fb      	STD  Y+10+1,R31
00042b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00042c 3040      	CPI  R20,0
00042d f011      	BREQ _0x2020044
00042e 5f1f      	SUBI R17,-LOW(1)
00042f c001      	RJMP _0x2020045
                 _0x2020044:
000430 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000431 c004      	RJMP _0x2020046
                 _0x2020042:
000432 940e 0575 	CALL SUBOPT_0xD
000434 940e 058b 	CALL SUBOPT_0x10
                 _0x2020046:
                 _0x2020036:
000436 fd00      	SBRC R16,0
000437 c011      	RJMP _0x2020047
                 _0x2020048:
000438 1715      	CP   R17,R21
000439 f478      	BRSH _0x202004A
00043a ff07      	SBRS R16,7
00043b c008      	RJMP _0x202004B
00043c ff02      	SBRS R16,2
00043d c004      	RJMP _0x202004C
00043e 7f0b      	ANDI R16,LOW(251)
00043f 2f24      	MOV  R18,R20
000440 5011      	SUBI R17,LOW(1)
000441 c001      	RJMP _0x202004D
                 _0x202004C:
000442 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000443 c001      	RJMP _0x202004E
                 _0x202004B:
000444 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000445 940e 056e 	CALL SUBOPT_0xC
000447 5051      	SUBI R21,LOW(1)
000448 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000449 2f31      	MOV  R19,R17
00044a ff01      	SBRS R16,1
00044b c017      	RJMP _0x202004F
                 _0x2020050:
00044c 3030      	CPI  R19,0
00044d f0a1      	BREQ _0x2020052
00044e ff03      	SBRS R16,3
00044f c006      	RJMP _0x2020053
000450 81ee      	LDD  R30,Y+6
000451 81ff      	LDD  R31,Y+6+1
000452 9125      	LPM  R18,Z+
000453 83ee      	STD  Y+6,R30
000454 83ff      	STD  Y+6+1,R31
000455 c005      	RJMP _0x2020054
                 _0x2020053:
000456 81ae      	LDD  R26,Y+6
000457 81bf      	LDD  R27,Y+6+1
000458 912d      	LD   R18,X+
000459 83ae      	STD  Y+6,R26
00045a 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00045b 940e 056e 	CALL SUBOPT_0xC
00045d 3050      	CPI  R21,0
00045e f009      	BREQ _0x2020055
00045f 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000460 5031      	SUBI R19,LOW(1)
000461 cfea      	RJMP _0x2020050
                 _0x2020052:
000462 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000463 e320      	LDI  R18,LOW(48)
000464 81ee      	LDD  R30,Y+6
000465 81ff      	LDD  R31,Y+6+1
000466 940e 05c7 	CALL __GETW1PF
000468 87e8      	STD  Y+8,R30
000469 87f9      	STD  Y+8+1,R31
00046a 81ee      	LDD  R30,Y+6
00046b 81ff      	LDD  R31,Y+6+1
00046c 9632      	ADIW R30,2
00046d 83ee      	STD  Y+6,R30
00046e 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00046f 85e8      	LDD  R30,Y+8
000470 85f9      	LDD  R31,Y+8+1
000471 85aa      	LDD  R26,Y+10
000472 85bb      	LDD  R27,Y+10+1
000473 17ae      	CP   R26,R30
000474 07bf      	CPC  R27,R31
000475 f050      	BRLO _0x202005C
000476 5f2f      	SUBI R18,-LOW(1)
000477 85a8      	LDD  R26,Y+8
000478 85b9      	LDD  R27,Y+8+1
000479 85ea      	LDD  R30,Y+10
00047a 85fb      	LDD  R31,Y+10+1
00047b 1bea      	SUB  R30,R26
00047c 0bfb      	SBC  R31,R27
00047d 87ea      	STD  Y+10,R30
00047e 87fb      	STD  Y+10+1,R31
00047f cfef      	RJMP _0x202005A
                 _0x202005C:
000480 332a      	CPI  R18,58
000481 f028      	BRLO _0x202005D
000482 ff03      	SBRS R16,3
000483 c002      	RJMP _0x202005E
000484 5f29      	SUBI R18,-LOW(7)
000485 c001      	RJMP _0x202005F
                 _0x202005E:
000486 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000487 fd04      	SBRC R16,4
000488 c01a      	RJMP _0x2020061
000489 3321      	CPI  R18,49
00048a f420      	BRSH _0x2020063
00048b 85a8      	LDD  R26,Y+8
00048c 85b9      	LDD  R27,Y+8+1
00048d 9711      	SBIW R26,1
00048e f409      	BRNE _0x2020062
                 _0x2020063:
00048f c009      	RJMP _0x20200CD
                 _0x2020062:
000490 1753      	CP   R21,R19
000491 f010      	BRLO _0x2020067
000492 ff00      	SBRS R16,0
000493 c001      	RJMP _0x2020068
                 _0x2020067:
000494 c013      	RJMP _0x2020066
                 _0x2020068:
000495 e220      	LDI  R18,LOW(32)
000496 ff07      	SBRS R16,7
000497 c00b      	RJMP _0x2020069
000498 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000499 6100      	ORI  R16,LOW(16)
00049a ff02      	SBRS R16,2
00049b c007      	RJMP _0x202006A
00049c 7f0b      	ANDI R16,LOW(251)
00049d 934a      	ST   -Y,R20
00049e 940e 057b 	CALL SUBOPT_0xE
0004a0 3050      	CPI  R21,0
0004a1 f009      	BREQ _0x202006B
0004a2 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004a3 940e 056e 	CALL SUBOPT_0xC
0004a5 3050      	CPI  R21,0
0004a6 f009      	BREQ _0x202006C
0004a7 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004a8 5031      	SUBI R19,LOW(1)
0004a9 85a8      	LDD  R26,Y+8
0004aa 85b9      	LDD  R27,Y+8+1
0004ab 9712      	SBIW R26,2
0004ac f008      	BRLO _0x2020059
0004ad cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004ae ff00      	SBRS R16,0
0004af c008      	RJMP _0x202006D
                 _0x202006E:
0004b0 3050      	CPI  R21,0
0004b1 f031      	BREQ _0x2020070
0004b2 5051      	SUBI R21,LOW(1)
0004b3 e2e0      	LDI  R30,LOW(32)
0004b4 93ea      	ST   -Y,R30
0004b5 940e 057b 	CALL SUBOPT_0xE
0004b7 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004b8 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004b9 cee0      	RJMP _0x2020016
                 _0x2020018:
0004ba 85ac      	LDD  R26,Y+12
0004bb 85bd      	LDD  R27,Y+12+1
0004bc 940e 05c3 	CALL __GETW1P
0004be 940e 05d7 	CALL __LOADLOCR6
0004c0 9664      	ADIW R28,20
0004c1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004c2 92ff      	PUSH R15
0004c3 2ef8      	MOV  R15,R24
0004c4 9726      	SBIW R28,6
0004c5 940e 05d2 	CALL __SAVELOCR4
0004c7 940e 0593 	CALL SUBOPT_0x11
0004c9 9730      	SBIW R30,0
0004ca f419      	BRNE _0x2020072
0004cb efef      	LDI  R30,LOW(65535)
0004cc efff      	LDI  R31,HIGH(65535)
0004cd c023      	RJMP _0x2080001
                 _0x2020072:
0004ce 01de      	MOVW R26,R28
0004cf 9616      	ADIW R26,6
0004d0 940e 05a4 	CALL __ADDW2R15
0004d2 018d      	MOVW R16,R26
0004d3 940e 0593 	CALL SUBOPT_0x11
0004d5 83ee      	STD  Y+6,R30
0004d6 83ff      	STD  Y+6+1,R31
0004d7 e0e0      	LDI  R30,LOW(0)
0004d8 87e8      	STD  Y+8,R30
0004d9 87e9      	STD  Y+8+1,R30
0004da 01de      	MOVW R26,R28
0004db 961a      	ADIW R26,10
0004dc 940e 05a4 	CALL __ADDW2R15
0004de 940e 05c3 	CALL __GETW1P
0004e0 93fa      	ST   -Y,R31
0004e1 93ea      	ST   -Y,R30
0004e2 931a      	ST   -Y,R17
0004e3 930a      	ST   -Y,R16
0004e4 e5e0      	LDI  R30,LOW(_put_buff_G101)
0004e5 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 01de      	MOVW R26,R28
0004e9 961a      	ADIW R26,10
0004ea dea5      	RCALL __print_G101
0004eb 019f      	MOVW R18,R30
0004ec 81ae      	LDD  R26,Y+6
0004ed 81bf      	LDD  R27,Y+6+1
0004ee e0e0      	LDI  R30,LOW(0)
0004ef 93ec      	ST   X,R30
0004f0 01f9      	MOVW R30,R18
                 _0x2080001:
0004f1 940e 05d9 	CALL __LOADLOCR4
0004f3 962a      	ADIW R28,10
0004f4 90ff      	POP  R15
0004f5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpy:
                 ; .FSTART _strcpy
0004f6 93ba      	ST   -Y,R27
0004f7 93aa      	ST   -Y,R26
0004f8 91e9          ld   r30,y+
0004f9 91f9          ld   r31,y+
0004fa 91a9          ld   r26,y+
0004fb 91b9          ld   r27,y+
0004fc 01cd          movw r24,r26
                 strcpy0:
0004fd 9161          ld   r22,z+
0004fe 936d          st   x+,r22
0004ff 2366          tst  r22
000500 f7e1          brne strcpy0
000501 01fc          movw r30,r24
000502 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000503 93ba      	ST   -Y,R27
000504 93aa      	ST   -Y,R26
000505 91a9          ld   r26,y+
000506 91b9          ld   r27,y+
000507 27ee          clr  r30
000508 27ff          clr  r31
                 strlen0:
000509 916d          ld   r22,x+
00050a 2366          tst  r22
00050b f011          breq strlen1
00050c 9631          adiw r30,1
00050d cffb          rjmp strlen0
                 strlen1:
00050e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00050f 93ba      	ST   -Y,R27
000510 93aa      	ST   -Y,R26
000511 27aa          clr  r26
000512 27bb          clr  r27
000513 91e9          ld   r30,y+
000514 91f9          ld   r31,y+
                 strlenf0:
000515 9005      	lpm  r0,z+
000516 2000          tst  r0
000517 f011          breq strlenf1
000518 9611          adiw r26,1
000519 cffb          rjmp strlenf0
                 strlenf1:
00051a 01fd          movw r30,r26
00051b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _game_board:
00018b           	.BYTE 0x12
                 _win:
00019d           	.BYTE 0x10
                 _k:
0001ad           	.BYTE 0x2
                 _row:
0001af           	.BYTE 0x4
                 _txt:
0001b3           	.BYTE 0x2
                 __base_y_G100:
0001b5           	.BYTE 0x4
                 __lcd_x:
0001b9           	.BYTE 0x1
                 __lcd_y:
0001ba           	.BYTE 0x1
                 __lcd_maxx:
0001bb           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00051c e0e3      	LDI  R30,LOW(3)
00051d e0f0      	LDI  R31,HIGH(3)
00051e 16ae      	CP   R10,R30
00051f 06bf      	CPC  R11,R31
000520 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000521 e0e3      	LDI  R30,LOW(3)
000522 e0f0      	LDI  R31,HIGH(3)
000523 16ce      	CP   R12,R30
000524 06df      	CPC  R13,R31
000525 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:96 WORDS
                 SUBOPT_0x2:
000526 01f5      	MOVW R30,R10
000527 e0a6      	LDI  R26,LOW(6)
000528 e0b0      	LDI  R27,HIGH(6)
000529 940e 05bb 	CALL __MULW12U
00052b 57e5      	SUBI R30,LOW(-_game_board)
00052c 4ffe      	SBCI R31,HIGH(-_game_board)
00052d 01df      	MOVW R26,R30
00052e 01f6      	MOVW R30,R12
00052f 0fee      	LSL  R30
000530 1fff      	ROL  R31
000531 0fae      	ADD  R26,R30
000532 1fbf      	ADC  R27,R31
000533 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000534 e0e0      	LDI  R30,LOW(0)
000535 e0f0      	LDI  R31,HIGH(0)
000536 93ed      	ST   X+,R30
000537 93fc      	ST   X,R31
000538 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000539 e0e8      	LDI  R30,LOW(8)
00053a e0f0      	LDI  R31,HIGH(8)
00053b 16ae      	CP   R10,R30
00053c 06bf      	CPC  R11,R31
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00053e 01f5      	MOVW R30,R10
00053f e9ad      	LDI  R26,LOW(_win)
000540 e0b1      	LDI  R27,HIGH(_win)
000541 0fee      	LSL  R30
000542 1fff      	ROL  R31
000543 0fae      	ADD  R26,R30
000544 1fbf      	ADC  R27,R31
000545 cfee      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000546 940e 0090 	CALL _keypad
000548 01f5      	MOVW R30,R10
000549 940e 05ac 	CALL __LSLW2
00054b 0dec      	ADD  R30,R12
00054c 1dfd      	ADC  R31,R13
00054d 93e0 01ad 	STS  _k,R30
00054f 93f0 01ae 	STS  _k+1,R31
000551 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000552 91a0 01ad 	LDS  R26,_k
000554 91b0 01ae 	LDS  R27,_k+1
000556 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000557 01f5      	MOVW R30,R10
000558 e9ad      	LDI  R26,LOW(_win)
000559 e0b1      	LDI  R27,HIGH(_win)
00055a 0fee      	LSL  R30
00055b 1fff      	ROL  R31
00055c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00055d 940e 05c3 	CALL __GETW1P
00055f 0fe6      	ADD  R30,R22
000560 1ff7      	ADC  R31,R23
000561 01dc      	MOVW R26,R24
000562 93ed      	ST   X+,R30
000563 93fc      	ST   X,R31
000564 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000565 940e 030b 	CALL __long_delay_G100
000567 e3a0      	LDI  R26,LOW(48)
000568 940c 0310 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00056a 940e 0289 	CALL __lcd_write_data
00056c 940c 030b 	JMP  __long_delay_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
00056e 932a      	ST   -Y,R18
00056f 85ad      	LDD  R26,Y+13
000570 85be      	LDD  R27,Y+13+1
000571 85ef      	LDD  R30,Y+15
000572 89f8      	LDD  R31,Y+15+1
000573 9509      	ICALL
000574 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
000575 89e8      	LDD  R30,Y+16
000576 89f9      	LDD  R31,Y+16+1
000577 9734      	SBIW R30,4
000578 8be8      	STD  Y+16,R30
000579 8bf9      	STD  Y+16+1,R31
00057a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
00057b 85ad      	LDD  R26,Y+13
00057c 85be      	LDD  R27,Y+13+1
00057d 85ef      	LDD  R30,Y+15
00057e 89f8      	LDD  R31,Y+15+1
00057f 9509      	ICALL
000580 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
000581 89a8      	LDD  R26,Y+16
000582 89b9      	LDD  R27,Y+16+1
000583 9614      	ADIW R26,4
000584 940e 05c3 	CALL __GETW1P
000586 83ee      	STD  Y+6,R30
000587 83ff      	STD  Y+6+1,R31
000588 81ae      	LDD  R26,Y+6
000589 81bf      	LDD  R27,Y+6+1
00058a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
00058b 89a8      	LDD  R26,Y+16
00058c 89b9      	LDD  R27,Y+16+1
00058d 9614      	ADIW R26,4
00058e 940e 05c3 	CALL __GETW1P
000590 87ea      	STD  Y+10,R30
000591 87fb      	STD  Y+10+1,R31
000592 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000593 01de      	MOVW R26,R28
000594 961c      	ADIW R26,12
000595 940e 05a4 	CALL __ADDW2R15
000597 940e 05c3 	CALL __GETW1P
000599 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00059a 9610      	adiw r26,0
00059b f039      	breq __delay_ms1
                 __delay_ms0:
00059c 95a8      	wdr
                +
00059d ed80     +LDI R24 , LOW ( 0x7D0 )
00059e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00059f 9701     +SBIW R24 , 1
0005a0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005a1 9711      	sbiw r26,1
0005a2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005a3 9508      	ret
                 
                 __ADDW2R15:
0005a4 2400      	CLR  R0
0005a5 0daf      	ADD  R26,R15
0005a6 1db0      	ADC  R27,R0
0005a7 9508      	RET
                 
                 __ANEGW1:
0005a8 95f1      	NEG  R31
0005a9 95e1      	NEG  R30
0005aa 40f0      	SBCI R31,0
0005ab 9508      	RET
                 
                 __LSLW2:
0005ac 0fee      	LSL  R30
0005ad 1fff      	ROL  R31
0005ae 0fee      	LSL  R30
0005af 1fff      	ROL  R31
0005b0 9508      	RET
                 
                 __CWD1:
0005b1 2f6f      	MOV  R22,R31
0005b2 0f66      	ADD  R22,R22
0005b3 0b66      	SBC  R22,R22
0005b4 2f76      	MOV  R23,R22
0005b5 9508      	RET
                 
                 __LNEGW1:
0005b6 2bef      	OR   R30,R31
0005b7 e0e1      	LDI  R30,1
0005b8 f009      	BREQ __LNEGW1F
0005b9 e0e0      	LDI  R30,0
                 __LNEGW1F:
0005ba 9508      	RET
                 
                 __MULW12U:
0005bb 9ffa      	MUL  R31,R26
0005bc 2df0      	MOV  R31,R0
0005bd 9feb      	MUL  R30,R27
0005be 0df0      	ADD  R31,R0
0005bf 9fea      	MUL  R30,R26
0005c0 2de0      	MOV  R30,R0
0005c1 0df1      	ADD  R31,R1
0005c2 9508      	RET
                 
                 __GETW1P:
0005c3 91ed      	LD   R30,X+
0005c4 91fc      	LD   R31,X
0005c5 9711      	SBIW R26,1
0005c6 9508      	RET
                 
                 __GETW1PF:
0005c7 9005      	LPM  R0,Z+
0005c8 91f4      	LPM  R31,Z
0005c9 2de0      	MOV  R30,R0
0005ca 9508      	RET
                 
                 __PUTPARD1:
0005cb 937a      	ST   -Y,R23
0005cc 936a      	ST   -Y,R22
0005cd 93fa      	ST   -Y,R31
0005ce 93ea      	ST   -Y,R30
0005cf 9508      	RET
                 
                 __SAVELOCR6:
0005d0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005d1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005d4 931a      	ST   -Y,R17
0005d5 930a      	ST   -Y,R16
0005d6 9508      	RET
                 
                 __LOADLOCR6:
0005d7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005d8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005d9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005da 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005db 8119      	LDD  R17,Y+1
0005dc 8108      	LD   R16,Y
0005dd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  24 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   4 r7 :   2 
r8 :   8 r9 :   6 r10:  42 r11:  16 r12:  25 r13:  11 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  17 r23:   5 
r24:  16 r25:   3 r26: 165 r27:  68 r28:  14 r29:   1 r30: 300 r31: 133 
x  :  29 y  : 171 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  19 
adiw  :  36 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   2 brmi  :   1 brne  :  43 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 130 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :  21 cpi   :  38 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  26 ld    :  32 ldd   :  77 ldi   : 157 
lds   :   9 lpm   :  14 lsl   :   7 lsr   :   0 mov   :  22 movw  :  64 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   8 out   :  15 pop   :   3 push  :   3 rcall :  22 ret   :  47 
reti  :   0 rjmp  :  91 rol   :   7 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   9 sbic  :   1 sbis  :   7 sbiw  :  24 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  68 std   :  31 sts   :  17 sub   :   1 subi  :  20 swap  :   2 
tst   :   5 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bbc   2890    114   3004   16384  18.3%
[.dseg] 0x000060 0x0001bc      0     92     92    1024   9.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
